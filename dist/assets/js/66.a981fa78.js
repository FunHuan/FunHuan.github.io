(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{699:function(t,a,s){"use strict";s.r(a);var r=s(4),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1 概念")]),t._v(" "),s("p",[t._v("回溯算法实际上一个类似穷举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。")]),t._v(" "),s("p",[t._v("回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。"),s("strong",[t._v("回溯算法也可以看作DFS算法")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_2基本思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2基本思想"}},[t._v("#")]),t._v(" 2基本思想")]),t._v(" "),s("p",[t._v("在包含问题的所有解的解空间树中，按照"),s("strong",[t._v("深度优先搜索的策略")]),t._v("，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。")])]),t._v(" "),s("li",[s("p",[t._v("而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。")])])]),t._v(" "),s("p",[s("strong",[t._v("解决一个回溯问题，实际上就是一个决策树（解空间树）的遍历过程")]),t._v("，需要考虑一下三个问题：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("路径：也就是已经做出的选择。")])]),t._v(" "),s("li",[s("p",[t._v("选择列表：也就是你当前可以做的选择。")])]),t._v(" "),s("li",[s("p",[t._v("结束条件：也就是到达决策树底层，无法再做选择的条件。")])])]),t._v(" "),s("h2",{attrs:{id:"_3-基本步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-基本步骤"}},[t._v("#")]),t._v(" 3 基本步骤")]),t._v(" "),s("p",[t._v("（1）针对所给问题，确定问题的解空间：")]),t._v(" "),s("p",[t._v("​      首先应明确定义问题的解空间，问题的解空间应至少包含问题的一个（最优）解。")]),t._v(" "),s("p",[t._v("（2）确定结点的扩展搜索规则")]),t._v(" "),s("p",[t._v("（3）以深度优先方式搜索解空间（决策树），并在搜索过程中用剪枝函数避免无效搜索。")]),t._v(" "),s("h2",{attrs:{id:"_4-算法框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-算法框架"}},[t._v("#")]),t._v(" 4 算法框架")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回溯算法框架")]),t._v("\n  result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  def "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 选择列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 满足结束条件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n      \n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 选择 in 选择列表"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          做选择\n          "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 选择列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          撤销选择\n")])])]),s("h2",{attrs:{id:"_5-典型示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-典型示例"}},[t._v("#")]),t._v(" 5 典型示例")]),t._v(" "),s("p",[t._v("示例1："),s("a",{attrs:{href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"}},[t._v("全排列问题"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("示例2："),s("a",{attrs:{href:"https://leetcode-cn.com/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"}},[t._v("N皇后问题"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("示例3："),s("a",{attrs:{href:"https://leetcode-cn.com/problems/partition-to-k-equal-sum-subsets/",target:"_blank",rel:"noopener noreferrer"}},[t._v("划分为k个相等的子集"),s("OutboundLink")],1)]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("参考文章：")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://labuladong.gitee.io/algo/4/28/88/",target:"_blank",rel:"noopener noreferrer"}},[t._v("labuladong的算法小抄——回溯算法详解"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741376.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("五大常用算法之四：回溯法"),s("OutboundLink")],1)])])])])}),[],!1,null,null,null);a.default=e.exports}}]);