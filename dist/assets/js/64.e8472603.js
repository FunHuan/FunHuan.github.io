(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{697:function(_,v,l){"use strict";l.r(v);var i=l(4),t=Object(i.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"算法设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#算法设计"}},[_._v("#")]),_._v(" 算法设计")]),_._v(" "),l("ul",[l("li",[_._v("数据结构\n"),l("ul",[l("li",[_._v("线性表： 数组")]),_._v(" "),l("li",[_._v("线性表： 链表")]),_._v(" "),l("li",[_._v("线性表： 栈和队列，双端队列")]),_._v(" "),l("li",[_._v("线性+散列：哈希表(HashTable)")]),_._v(" "),l("li",[_._v("线性+散列：跳表(SkipList)")]),_._v(" "),l("li",[_._v("树：二叉查找树(Binary Tree)")]),_._v(" "),l("li",[_._v("树：平衡二叉树(AVL)")]),_._v(" "),l("li",[_._v("树：B树(B Tree)")]),_._v(" "),l("li",[_._v("树：前缀树(Trie Tree)")]),_._v(" "),l("li",[_._v("图：基础知识")]),_._v(" "),l("li",[_._v("图：遍历(BFS & DFS)")]),_._v(" "),l("li",[_._v("图：最小生成树(Prim & Kruskal)")]),_._v(" "),l("li",[_._v("图：最短路径(Dijkstra & Frolyd)")]),_._v(" "),l("li",[_._v("图：拓扑排序(Topological sort)")])])]),_._v(" "),l("li",[_._v("查找算法\n"),l("ul",[l("li",[_._v("顺序查找")]),_._v(" "),l("li",[_._v("二分查找")]),_._v(" "),l("li",[_._v("插值查找")]),_._v(" "),l("li",[_._v("斐波那契查找")]),_._v(" "),l("li",[_._v("树表查找")]),_._v(" "),l("li",[_._v("分块查找")]),_._v(" "),l("li",[_._v("哈希查找")])])]),_._v(" "),l("li",[_._v("排序算法\n"),l("ul",[l("li",[_._v("冒泡排序(Bubble Sort)")]),_._v(" "),l("li",[_._v("选择排序(Selection Sort)")]),_._v(" "),l("li",[_._v("插入排序(Insertion Sort)")]),_._v(" "),l("li",[_._v("希尔排序(Shell Sort)")]),_._v(" "),l("li",[_._v("快速排序(Quick Sort)")]),_._v(" "),l("li",[_._v("归并排序(Merge Sort)")]),_._v(" "),l("li",[_._v("堆排序(Heap Sort)")]),_._v(" "),l("li",[_._v("桶排序(Bucket Sort)")]),_._v(" "),l("li",[_._v("基数排序(Radix Sort)")])])]),_._v(" "),l("li",[_._v("算法思想\n"),l("ul",[l("li",[_._v("分治算法")]),_._v(" "),l("li",[_._v("动态规划算法")]),_._v(" "),l("li",[_._v("贪心算法")]),_._v(" "),l("li",[_._v("二分法")]),_._v(" "),l("li",[_._v("搜索算法")]),_._v(" "),l("li",[_._v("回溯算法")])])]),_._v(" "),l("li",[_._v("设计模式\n"),l("ul",[l("li",[_._v("设计模式六大原则")]),_._v(" "),l("li",[_._v("建造型设计模式：单例 (Singleton Pattern)")]),_._v(" "),l("li",[_._v("建造型设计模式：建造者模式(Builder Pattern)")]),_._v(" "),l("li",[_._v("建造型设计模式：简单工厂 (Simple Factory)")]),_._v(" "),l("li",[_._v("建造型设计模式：工厂方法 (Abstract Factory Method)")]),_._v(" "),l("li",[_._v("建造型设计模式：抽象工厂 (Abstract Factory)")]),_._v(" "),l("li",[_._v("结构型设计模式：装饰者 (Decorator Pattern)")]),_._v(" "),l("li",[_._v("结构型设计模式：适配 (Adapter Pattern)")]),_._v(" "),l("li",[_._v("结构型设计模式：外观 (Facade Pattern)")]),_._v(" "),l("li",[_._v("结构型设计模式：代理 (Proxy)")]),_._v(" "),l("li",[_._v("结构型设计模式：桥接模式 (Bridge)")]),_._v(" "),l("li",[_._v("行为型设计模式：观察者 (Observer)")]),_._v(" "),l("li",[_._v("行为型设计模式：事件监听模式 （事件源，事件，监听者）")]),_._v(" "),l("li",[_._v("行为型设计模式：策略 (Strategy)-https://blog.csdn.net/carson_ho/article/details/54910374")]),_._v(" "),l("li",[_._v("行为型设计模式：责任链 (Chain of Responsibility Pattern)-https://blog.csdn.net/eson_15/article/details/52126811")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);