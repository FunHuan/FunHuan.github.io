(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{706:function(e,a,s){"use strict";s.r(a);var t=s(4),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"nginx基本配置与分发策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx基本配置与分发策略"}},[e._v("#")]),e._v(" Nginx基本配置与分发策略")]),e._v(" "),s("h2",{attrs:{id:"_1-为什么叫反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么叫反向代理"}},[e._v("#")]),e._v(" 1 为什么叫反向代理？")]),e._v(" "),s("p",[e._v("关于反向代理和正向代理的概念，贴出知乎上面的一个回答，个人觉得还是很形象的。\nhttps://www.zhihu.com/question/24723688 。")]),e._v(" "),s("blockquote",[s("p",[e._v("正向代理，被代理对象是客户端，服务端不知道客户端是谁，只知道代理对象.")]),e._v(" "),s("p",[e._v("反向代理，被代理对象是服务端，客户端不知道服务端是谁，只知道代理对象")])]),e._v(" "),s("h2",{attrs:{id:"_2-nginx如何处理请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-nginx如何处理请求"}},[e._v("#")]),e._v(" 2 Nginx如何处理请求")]),e._v(" "),s("h3",{attrs:{id:"_2-1-基于域名的虚拟主机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-基于域名的虚拟主机"}},[e._v("#")]),e._v(" 2.1 基于域名的虚拟主机")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n")])])]),s("p",[e._v("如上面的配置，就是使用基于域名的配置，请求会对应到对应server_name的主机上面，如果没有匹配的主机，这个时候nginx会默认把第一当做默认处理主机，当然也可以使用如下配置(default_server)指定默认处理主机：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n")])])]),s("h3",{attrs:{id:"_2-2-基于域名和ip的虚拟主机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-基于域名和ip的虚拟主机"}},[e._v("#")]),e._v(" 2.2 基于域名和IP的虚拟主机")]),e._v(" "),s("p",[e._v("接下来看看不同主机listen on 不同的IP地址")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n")])])]),s("p",[e._v("对于这种情况，Nginx会先检测IP和端口，再去检测server_name是否匹配，如果IP匹配了，但是server_name 没有匹配，就是使用当前匹配的ip+port的default_server ，如果没有配置default_server就是默认使用第一个作为default_server.")]),e._v(" "),s("p",[s("strong",[e._v("关于server_name的几种形式")])]),e._v(" "),s("ol",[s("li",[e._v("字符串或者IP地址")]),e._v(" "),s("li",[e._v("通配符，*")]),e._v(" "),s("li",[e._v("正则表达式")]),e._v(" "),s("li",[e._v("多个一起组合而成（上例中server_name每个配置了多个name）")]),e._v(" "),s("li",[e._v('一些特殊字符，例如： "","-","--"等')])]),e._v(" "),s("h2",{attrs:{id:"_3-负载均衡-load-balance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-负载均衡-load-balance"}},[e._v("#")]),e._v(" 3 负载均衡（load balance）")]),e._v(" "),s("h3",{attrs:{id:"_3-1-负载均衡算法-load-balancing-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-负载均衡算法-load-balancing-methods"}},[e._v("#")]),e._v(" 3.1 负载均衡算法(Load balancing methods)")]),e._v(" "),s("p",[e._v("使用Nginx作为http负载均衡实现。Nginx负载均衡算法有如下几种：")]),e._v(" "),s("ol",[s("li",[e._v("Round-Robin，轮询调度算法，"),s("strong",[e._v("当配置未指明的时候，默认就是轮询算法")])]),e._v(" "),s("li",[e._v("least-connected，下一次链接将被链接到活跃链接最少的机器上")]),e._v(" "),s("li",[e._v("ip-hash，利用IP地址哈希进行分配")]),e._v(" "),s("li",[e._v("weight-balancing，按照权重分配")])]),e._v(" "),s("p",[e._v("需要说明的是，很多时候，weight-balancing都是和least-connected或者ip-hash算法一起使用，在官方文档中，都没有把他算做load balancing methods中的一种。")]),e._v(" "),s("h3",{attrs:{id:"_3-2-常见配置示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-常见配置示例"}},[e._v("#")]),e._v(" 3.2 常见配置示例")]),e._v(" "),s("ol",[s("li",[e._v("最常见的配置,默认轮询算法")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("http {\n    upstream myapp1 {\n        server srv1.example.com;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n\n    server {\n        listen 80;\n\n        location / {\n            proxy_pass http://myapp1;\n        }\n    }\n}\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("使用least-connected")])]),e._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("upstream")]),e._v(" myapp1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    least_conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")]),e._v(" srv1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")]),e._v(" srv2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")]),e._v(" srv3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[e._v("使用ip-hash算法")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("upstream myapp1 {\n    ip_hash;\n    server srv1.example.com;\n    server srv2.example.com;\n    server srv3.example.com;\n}\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[e._v("权重分配")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("upstream myapp1 {\n        server srv1.example.com weight=3;\n        server srv2.example.com;\n        server srv3.example.com;\n    }\n")])])]),s("p",[e._v("此种配置，srv1占比3/5,srv2,srv3分别占比 1/5")]),e._v(" "),s("h2",{attrs:{id:"_4-关于健康检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-关于健康检查"}},[e._v("#")]),e._v(" 4 关于健康检查")]),e._v(" "),s("p",[e._v("简单的服务端示例健康检查，使用server配置上面的fail_timeout配置，设置失败时间，在设置时间内没回应，Nginx就会用不断的起尝试，如果可行就标记服务为live。如果客户端返回错误，Nginx就会标记这个节点为failed，然后避免转发请求到这个节点。")]),e._v(" "),s("p",[e._v("关于健康监测，在后续总结中会有专门的分析使用。")]),e._v(" "),s("h2",{attrs:{id:"_5-ngx-http-upstream-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-ngx-http-upstream-module"}},[e._v("#")]),e._v(" 5 ngx_http_upstream_module")]),e._v(" "),s("p",[e._v("更多时候我们配置都是这个模块的一些配置，下面简单总结下此模块的配置说明")]),e._v(" "),s("p",[e._v("先提供一个示例：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("upstream backend {\n    server backend1.example.com       weight=5;\n    server backend2.example.com:8080;\n    server unix:/tmp/backend3;\n\n    server backup1.example.com:8080   backup;\n    server backup2.example.com:8080   backup;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n    }\n}\n")])])]),s("p",[e._v("http模块中比较重要的几个节点")]),e._v(" "),s("p",[e._v("upstream name {....}")]),e._v(" "),s("p",[e._v("在upstream中常见的节点有  server，ip_hash，keepalive，least_conn,least_time")]),e._v(" "),s("p",[e._v("分别介绍下这几个节点")]),e._v(" "),s("h3",{attrs:{id:"_5-1-server节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-server节点"}},[e._v("#")]),e._v(" 5.1 server节点")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Syntax:\tserver address [parameters];\nDefault:\t—\nContext:\tupstream\n")])])]),s("p",[e._v("server的上下文为upstream，后面server地址和配置参数，如："),s("code",[e._v("server 192.168.0.100 weight=10 max_fails=3 fail_timeout=5")])]),e._v(" "),s("p",[e._v("分别介绍下可选的几个参数的含义：")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("weight=number")]),e._v("： 之前说过的，配置主机的权重，配合负载均衡算法")]),e._v(" "),s("li",[s("strong",[e._v("max_conns=number")]),e._v("： 同时生效的链接数上线，默认为0，表示不限制。如果server group不在共享内存中，则次值按每个 worker process 来工作")]),e._v(" "),s("li",[s("strong",[e._v("fail_timeout=number")]),e._v("： 1.在指定时间内超时，任务服务不可达时候尝试超时时间。2.判断服务不可用时间。默认时间为10s.")]),e._v(" "),s("li",[s("strong",[e._v("max_fails=number")]),e._v("：配合fail_timeout，做大的尝试次数，默认值为1，设置为0表示不统计尝试次数。")]),e._v(" "),s("li",[s("strong",[e._v("backup")]),e._v("：设置当前server 为备份机器，放主机器不可达的时候，请求会传递过来")]),e._v(" "),s("li",[s("strong",[e._v("down")]),e._v("：标记当前节点宕机")]),e._v(" "),s("li",[s("strong",[e._v("resolve")]),e._v("：指明解析的IP，要使用resolve ,需要先在http几点下面配置resolver，例如：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("http {\n    resolver 10.0.0.1;\n\n    upstream u {\n        zone ...;\n        ...\n        server example.com resolve;\n    }\n}\n")])])]),s("ol",{attrs:{start:"8"}},[s("li",[s("strong",[e._v("route")]),e._v("：设置服务路由名称")]),e._v(" "),s("li",[s("strong",[e._v("service")]),e._v("：启用DNS解析"),s("a",{attrs:{href:"https://tools.ietf.org/html/rfc2782",target:"_blank",rel:"noopener noreferrer"}},[e._v("SRV"),s("OutboundLink")],1),e._v("，并设置service名称")]),e._v(" "),s("li",[s("strong",[e._v("slow_start")]),e._v("：设置多久之后，server回复自己的权重值，设置server从不可达到健康之后多久认为是可用。"),s("strong",[e._v("次配置不能用在upstream 为 hash 或者ip_hash的算法中")]),e._v("。当server Group 中只有一个server的时候，max_fails、 fail_timeout 、slow_start都会被忽略。")])]),e._v(" "),s("h3",{attrs:{id:"_5-2-hash-ip-hash节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-hash-ip-hash节点"}},[e._v("#")]),e._v(" 5.2 hash/ip_hash节点")]),e._v(" "),s("p",[e._v("hash "),s("em",[e._v("key")]),e._v(" [consistent];  使用key值来做hash负载均衡，一旦添加个删除机器，需要重新做hash，负载后的路径可坑改变")]),e._v(" "),s("p",[e._v("ip_hash; 在upstream 中启用按照IP进行hash的分配策略")]),e._v(" "),s("h3",{attrs:{id:"_5-3-keepalive节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-keepalive节点"}},[e._v("#")]),e._v(" 5.3 keepalive节点")]),e._v(" "),s("p",[e._v("keepalive 激活服务器到upstream的缓存，设置上限的话，设置链接缓存的最大数量，如果超出数量，最少使用的链接就会被关闭。")]),e._v(" "),s("p",[e._v("例如：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("upstream memcached_backend {\n    server 127.0.0.1:11211;\n    server 10.0.0.2:11211;\n\n    keepalive 32;\n}\n")])])]),s("h3",{attrs:{id:"_5-4-least-conn-least-time节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-least-conn-least-time节点"}},[e._v("#")]),e._v(" 5.4 least_conn/least_time节点")]),e._v(" "),s("p",[e._v("least_conn: 使用least_conn 的负载均衡方式,找到链接最少的机器处理，并且结合权重来处理，如果有多台候选机器的话，会接着使用轮询的方式。")]),e._v(" "),s("p",[e._v("least_time: 找到平均响应时间最少并且连接数最少的机器，并结合权重，如何有多台候选机器的话，会接着使用轮询的方式。")])])}),[],!1,null,null,null);a.default=r.exports}}]);