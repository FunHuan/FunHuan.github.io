(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{612:function(_,t,e){_.exports=e.p+"assets/img/trx-1.90157a81.png"},613:function(_,t,e){_.exports=e.p+"assets/img/trx-2.9e90ea41.png"},614:function(_,t,e){_.exports=e.p+"assets/img/trx-3.6f6f1967.png"},615:function(_,t,e){_.exports=e.p+"assets/img/trx-4.c98b3587.png"},616:function(_,t,e){_.exports=e.p+"assets/img/trx-5.3a5494bd.png"},693:function(_,t,e){"use strict";e.r(t);var v=e(4),r=Object(v.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"mysql的并发控制机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql的并发控制机制"}},[_._v("#")]),_._v(" MySQL的并发控制机制")]),_._v(" "),v("p",[_._v("上一篇文章 "),v("RouterLink",{attrs:{to:"/01-database/mysql/004-mysql-transaction.html"}},[_._v("MySQL的事务隔离级别与实现原理")]),_._v(" 中分析了mysql并发情况下出现的 脏读(Dirty Read)、不可重复读(Non-Repeatable Read)、幻读(Phantom Read) 问题，\n提到了事务隔离级别和实现原理，其中关于实现原理知识简单介绍了几种方式（锁、版本号、MVCC），这篇文章将详细介绍每种方式的实现。")],1),_._v(" "),v("h2",{attrs:{id:"_1-基于锁实现并发控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于锁实现并发控制"}},[_._v("#")]),_._v(" 1 基于锁实现并发控制")]),_._v(" "),v("p",[_._v("锁（Locking）是数据库在并发访问时保证数据一致性和完整性的主要机制。在 MySQL 中，不同存储引擎使用不同的加锁方式；\n我们以 InnoDB 存储引擎为例介绍 MySQL 中的锁机制，其他存储引擎中的锁相对简单一些。")]),_._v(" "),v("h3",{attrs:{id:"_1-1-锁分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-锁分类"}},[_._v("#")]),_._v(" 1.1 锁分类")]),_._v(" "),v("p",[_._v("MySQL 中的锁可以按照粒度分为锁定整个表的表级锁（table-level locking）和锁定数据行的行级锁（row-level locking）：")]),_._v(" "),v("ul",[v("li",[_._v("表级锁具有开销小、加锁快的特性；表级锁的锁定粒度较大，发生锁冲突的概率高，支持的并发度低；")]),_._v(" "),v("li",[_._v("行级锁具有开销大，加锁慢的特性；行级锁的锁定粒度较小，发生锁冲突的概率低，支持的并发度高。")])]),_._v(" "),v("p",[_._v("InnoDB 存储引擎同时支持行级锁（row-level locking）和表级锁（table-level locking），默认情况下采用行级锁。")]),_._v(" "),v("ul",[v("li",[_._v("行级锁\n"),v("ul",[v("li",[_._v("共享锁（S）:允许获得该锁的事务读取数据行（读锁），同时允许其他事务获得该数据行上的共享锁，并且阻止其他事务获得数据行上的排他锁。")]),_._v(" "),v("li",[_._v("排他锁（X）:允许获得该锁的事务更新或删除数据行（写锁），同时阻止其他事务取得该数据行上的共享锁和排他锁。")])])]),_._v(" "),v("li",[_._v("表级锁\n"),v("ul",[v("li",[_._v("意向共享锁（IS）:事务在给数据行加行级共享锁之前，必须先取得该表的 IS 锁。")]),_._v(" "),v("li",[_._v("意向排他锁（IX）:事务在给数据行加行级排他锁之前，必须先取得该表的 IX 锁。")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-2-锁的实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-锁的实现"}},[_._v("#")]),_._v(" 1.2 锁的实现")]),_._v(" "),v("ol",[v("li",[_._v("关于表级锁实现；")])]),_._v(" "),v("blockquote",[v("p",[_._v("InnoDB 表存在两种表级锁，一种是LOCK TABLES语句手动指定的锁，另一种是由 InnoDB 自动添加的意向锁。")])]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[_._v("行级锁的实现：")])]),_._v(" "),v("blockquote",[v("p",[_._v("InnoDB 通过给索引上的索引记录加锁的方式实现行级锁。具体来说，InnoDB 实现了三种行锁的算法：记录锁（Record Lock）、间隙锁（Gap Lock）和 Next-key 锁（Next-key Lock）。")])]),_._v(" "),v("ul",[v("li",[_._v("记录锁（Record Lock）：记录锁（Record Lock）是针对索引记录（index record）的锁定。")])]),_._v(" "),v("p",[_._v("记录锁永远都是锁定索引记录，锁定非聚集索引会先锁定聚集索引。如果表中没有定义索引，InnoDB 默认为表创建一个隐藏的聚簇索引，并且使用该索引锁定记录。")]),_._v(" "),v("ul",[v("li",[_._v("间隙锁（Gap Lock）：间隙锁（Gap Lock）锁定的是索引记录之间的间隙、第一个索引之前的间隙或者最后一个索引之后的间隙。")])]),_._v(" "),v("p",[_._v("例如，SELECT * FROM t WHERE c1 BETWEEN 1 and 10 FOR UPDATE;会阻止其他事务将 1 到 10 之间的任何值插入到 c1 字段中，即使该列不存在这样的数据；因为这些值都会被锁定。")]),_._v(" "),v("ul",[v("li",[_._v("Next-key 锁（Next-key Lock）：相当于一个索引记录锁加上该记录之前的一个间隙锁。和间隙锁的却别在与记录存在的话要加一个记录锁。")])]),_._v(" "),v("p",[_._v("行锁分析请看 "),v("a",{attrs:{href:"https://tonydong.blog.csdn.net/article/details/103324323",target:"_blank",rel:"noopener noreferrer"}},[_._v("通过各种简单案例，让你彻底搞懂 MySQL 中的锁机制与 MVCC"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"_2-mvcc实现并发控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-mvcc实现并发控制"}},[_._v("#")]),_._v(" 2 MVCC实现并发控制")]),_._v(" "),v("p",[_._v("多版本控制（Multiversion Concurrency Control）: 指的是一种提高并发的技术。最早的数据库系统，只有读读之间可以并发，读写，写读，写写都要阻塞。\n引入多版本之后，只有写写之间相互阻塞，其他三种操作都可以并行，这样大幅度提高了InnoDB的并发度。在内部实现中，InnoDB通过undo log保存每条数据的多个版本，\n并且能够找回数据历史版本提供给用户读，每个事务读到的数据版本可能是不一样的。在同一个事务中，用户只能看到该事务创建快照之前已经提交的修改和该事务本身做的修改")]),_._v(" "),v("p",[_._v("MVCC在 Read Committed 和 Repeatable Read两个隔离级别下工作。")]),_._v(" "),v("p",[_._v('MySQL的InnoDB存储引擎默认事务隔离级别是RR(可重复读)，是通过 "行级锁+MVCC"一起实现的，正常读的时候不加锁，写的时候加锁。而 MVCC 的实现依赖：隐藏字段、Undo log、Read View。')]),_._v(" "),v("h3",{attrs:{id:"_2-1-隐藏字段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-隐藏字段"}},[_._v("#")]),_._v(" 2.1 隐藏字段")]),_._v(" "),v("p",[_._v("InnoDB存储引擎在每行数据的后面添加了三个隐藏字段：")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("DB_TRX_ID(6字节)")]),_._v("：表示最近一次对本记录行作修改（insert | update）的事务ID。至于delete操作，InnoDB认为是一个update操作，不过会更新一个另外的删除位，将行表示为deleted。并非真正删除。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("DB_ROLL_PTR(7字节)")]),_._v("：回滚指针，指向当前记录行的undo log信息")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("DB_ROW_ID(6字节)")]),_._v("：随着新行插入而单调递增的行ID。理解：当表没有主键或唯一非空索引时，innodb就会使用这个行ID自动产生聚簇索引。如果表有主键或唯一非空索引，聚簇索引就不会包含这个行ID了。这个DB_ROW_ID跟MVCC关系不大。")])])]),_._v(" "),v("h3",{attrs:{id:"_2-2-undo-log"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-undo-log"}},[_._v("#")]),_._v(" 2.2 Undo log")]),_._v(" "),v("p",[_._v("Undo log中存储的是老版本数据，当一个事务需要读取记录行时，如果当前记录行不可见，可以顺着undo log链找到满足其可见性条件的记录行版本。")]),_._v(" "),v("p",[_._v("大多数对数据的变更操作包括 insert/update/delete，在InnoDB里，undo log分为如下两类：")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("insert undo log")]),_._v(" : 事务对insert新记录时产生的undo log, 只在事务回滚时需要, 并且在事务提交后就可以立即丢弃。")]),_._v(" "),v("li",[v("strong",[_._v("update undo log")]),_._v(" : 事务对记录进行delete和update操作时产生的undo log，不仅在事务回滚时需要，快照读也需要，只有当数据库所使用的快照中不涉及该日志记录，对应的回滚日志才会被purge线程删除。")])]),_._v(" "),v("blockquote",[v("p",[_._v("Purge线程：为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下旧记录的deleted_bit，并不真正将旧记录删除。\n为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。purge线程自己也维护了一个read view，\n如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。")])]),_._v(" "),v("h3",{attrs:{id:"_2-3-read-view"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-read-view"}},[_._v("#")]),_._v(" 2.3 Read View")]),_._v(" "),v("p",[_._v("Read View(读视图)，相当于快照、snapshot的意思。")]),_._v(" "),v("p",[_._v("Read View 主要用来判断可见性，其保存了“对本事务不可见的其他活跃事务”。其中有几个关键的值（对理解可见性非常重要）：")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("trx_ids")]),_._v(": Read View 创建时的其他未提交的活跃事务ID列表，意思就是创建Read View时，将当前未提交的其他事务ID记录下来。")]),_._v(" "),v("li",[v("strong",[_._v("low_limit_id")]),_._v(": 目前出现过的最大事务id+1, 即下一个未被分配的事务id。")]),_._v(" "),v("li",[v("strong",[_._v("up_limit_id")]),_._v(": 活跃事务列表trx_ids中最小的事务ID，如果trx_ids为空，则up_limit_id 为 low_limit_id。")])]),_._v(" "),v("p",[_._v("关于Read View的生成")]),_._v(" "),v("ol",[v("li",[_._v("在innodb中的Repeatable Read级别, 只有事务在begin之后，执行第一条select（读操作）时, 才会创建一个快照(read view)，\n将当前系统中活跃的其他事务记录起来；并且事务之后都是使用的这个快照，不会重新创建，直到事务结束。")]),_._v(" "),v("li",[_._v("在innodb中的Read Committed级别, 事务在begin之后，执行每条select（读操作）语句时，快照会被重置，即会重新创建一个快照(read view)。")])]),_._v(" "),v("h3",{attrs:{id:"_2-4-记录行修改的流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-记录行修改的流程"}},[_._v("#")]),_._v(" 2.4 记录行修改的流程")]),_._v(" "),v("p",[_._v("记住上面的几个概念之后，下面说明下在记录行被修改的时候，具体流程如何（直接引用的 https://blog.csdn.net/Waves___/article/details/105295060 中的示例，就不再画图了）")]),_._v(" "),v("p",[_._v('假设有一条记录行如下，字段有Name和Honor，值分别为"curry"和"mvp"，最新修改这条记录的事务ID为1。\n'),v("img",{attrs:{src:e(612),alt:""}})]),_._v(" "),v("p",[_._v('1）现在事务A（事务ID为2）对该记录的Honor做出了修改，将Honor改为"fmvp"：')]),_._v(" "),v("ul",[v("li",[_._v("①事务A先对该行加排它锁")]),_._v(" "),v("li",[_._v("②然后把该行数据拷贝到undo log中，作为旧版本")]),_._v(" "),v("li",[_._v('③拷贝完毕后，修改该行的Honor为"fmvp"，并且修改DB_TRX_ID为2（事务A的ID）, 回滚指针指向拷贝到undo log的旧版本。（然后还会将修改后的最新数据写入redo log）')]),_._v(" "),v("li",[_._v("④事务提交，释放排他锁")])]),_._v(" "),v("p",[_._v("结果如下图：\n"),v("img",{attrs:{src:e(613),alt:""}})]),_._v(" "),v("p",[_._v('（2） 接着事务B（事务ID为3）修改同一个记录行，将Name修改为"iguodala"：')]),_._v(" "),v("ul",[v("li",[_._v("①事务B先对该行加排它锁")]),_._v(" "),v("li",[_._v("②然后把该行数据拷贝到undo log中，作为旧版本")]),_._v(" "),v("li",[_._v('③拷贝完毕后，修改该行Name为"iguodala"，并且修改DB_TRX_ID为3（事务B的ID）, 回滚指针指向拷贝到undo log最新的旧版本。')]),_._v(" "),v("li",[_._v("④事务提交，释放排他锁")])]),_._v(" "),v("p",[_._v("结果如下图：\n"),v("img",{attrs:{src:e(614),alt:""}})]),_._v(" "),v("p",[_._v("从上面可以看出，不同事务或者相同事务的对同一记录行的修改，会使该记录行的undo log成为一条链表，\nundo log的链首就是最新的旧记录，链尾就是最早的旧记录。")]),_._v(" "),v("h3",{attrs:{id:"_2-5-可见性比较算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-可见性比较算法"}},[_._v("#")]),_._v(" 2.5 可见性比较算法")]),_._v(" "),v("p",[_._v("在innodb中，创建一个新事务后，执行第一个select语句的时候，innodb会创建一个快照（read view），\n快照中会保存系统当前不应该被本事务看到的其他活跃事务id列表（即trx_ids）")]),_._v(" "),v("p",[_._v("先定义几个概念：")]),_._v(" "),v("ol",[v("li",[_._v("“当前事务”：要读取某一个记录行的事务")]),_._v(" "),v("li",[_._v("trx_id：被读取的记录行里面的 DB_TRX_ID的值")])]),_._v(" "),v("p",[_._v("那么可见性算法如下：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("步骤1")]),_._v(". 如果 trx_id < up_limit_id 说明 该记录行中记录的事务 在“当前事务”创建快照之前已经提交，所以该记录行对 “当前事务” 是可见的。")]),_._v(" "),v("li",[v("strong",[_._v("步骤2")]),_._v(". 如果 trx_id >= low_limit_id 说明 该记录行中记录的事务 在“当前事务”创建快照之后提交的，所以该记录行对 “当前事务” 是不可见的。")]),_._v(" "),v("li",[v("strong",[_._v("步骤3")]),_._v(". 如果 up_limit_id <= trx_id < low_limit_id, 表明 该记录行中记录的事务 在“当前事务”创建快照的时候可能处于“活动状态”或者“已提交状态”；所以就要对活跃事务列表trx_ids进行查找\n"),v("ul",[v("li",[_._v("如果在活跃事务列表trx_ids中能找到 id 为 trx_id 的事务，表明 1 在“当前事务”创建快照前，“该记录行的值”被“id为trx_id的事务”修改了，但没有提交；或者2 在“当前事务”创建快照后，\n“该记录行的值”被“id为trx_id的事务”修改了（不管有无提交）；这些情况下，这个记录行的值对当前事务都是不可见的，跳到步骤4；")]),_._v(" "),v("li",[_._v("在活跃事务列表中找不到，则表明“id为trx_id的事务”在修改“该记录行的值”后，在“当前事务”创建快照前就已经提交了，所以记录行对当前事务可见，跳到步骤5。")])])]),_._v(" "),v("li",[v("strong",[_._v("步骤4")]),_._v(". 在该记录行的 DB_ROLL_PTR 指针所指向的undo log回滚段中，取出最新的的旧事务号DB_TRX_ID, 将它赋给trx_id，然后跳到步骤1重新开始判断。")]),_._v(" "),v("li",[v("strong",[_._v("步骤5")]),_._v(". 将该可见行的值返回。")])]),_._v(" "),v("h3",{attrs:{id:"_2-6-示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-示例"}},[_._v("#")]),_._v(" 2.6 示例")]),_._v(" "),v("p",[_._v("下面给出一个示例，配合理解")]),_._v(" "),v("p",[_._v("假定原始数据如下：")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("field")]),_._v(" "),v("th",[_._v("DB_ROW_ID")]),_._v(" "),v("th",[_._v("DB_TRX_ID")]),_._v(" "),v("th",[_._v("DB_ROLL_PTR")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("0")]),_._v(" "),v("td",[_._v("10")]),_._v(" "),v("td",[_._v("10000")]),_._v(" "),v("td",[_._v("0x13525342")])])])]),_._v(" "),v("p",[_._v("示例1：\n"),v("img",{attrs:{src:e(615),alt:""}})]),_._v(" "),v("p",[_._v("示例2：\n"),v("img",{attrs:{src:e(616),alt:""}})]),_._v(" "),v("h2",{attrs:{id:"_3-业务加乐观锁控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-业务加乐观锁控制"}},[_._v("#")]),_._v(" 3 业务加乐观锁控制")]),_._v(" "),v("p",[_._v("业务上加乐观锁的方式就是上一篇"),v("RouterLink",{attrs:{to:"/01-database/mysql/004-mysql-transaction.html"}},[_._v("MySQL的事务隔离级别与实现原理")]),_._v("提到时间戳方式的思想，\n通过在业务表中显示定义一个version字段，在操作的时候在借用java锁的思想，通过CompareAndSet的方式，以自旋锁方式操作数据。")],1),_._v(" "),v("p",[_._v("此处就不展开说明了，实现上原理还是比较好理解的。")]),_._v(" "),v("hr"),_._v(" "),v("p",[_._v("参考链接：")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://tonydong.blog.csdn.net/article/details/103324323",target:"_blank",rel:"noopener noreferrer"}},[_._v("通过各种简单案例，让你彻底搞懂 MySQL 中的锁机制与 MVCC"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://blog.csdn.net/Waves___/article/details/105295060",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL中MVCC的正确打开方式（源码佐证）"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://draveness.me/database-concurrency-control/",target:"_blank",rel:"noopener noreferrer"}},[_._v("浅谈数据库并发控制 - 锁和 MVCC"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://segmentfault.com/a/1190000012650596",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL-InnoDB-MVCC多版本并发控制"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);