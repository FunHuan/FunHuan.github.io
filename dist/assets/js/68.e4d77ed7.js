(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{716:function(t,_,v){"use strict";v.r(_);var e=v(4),r=Object(e.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"动态规划算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#动态规划算法"}},[t._v("#")]),t._v(" 动态规划算法")]),t._v(" "),v("h2",{attrs:{id:"适用的情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#适用的情况"}},[t._v("#")]),t._v(" 适用的情况")]),t._v(" "),v("blockquote",[v("p",[t._v("能采用动态规划求解的问题的一般要具有3个性质：")]),t._v(" "),v("ol",[v("li",[t._v("最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。")]),t._v(" "),v("li",[t._v("无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。")]),t._v(" "),v("li",[t._v("有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（"),v("strong",[t._v("该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势")]),t._v("）")])])]),t._v(" "),v("h2",{attrs:{id:"求解的基本步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#求解的基本步骤"}},[t._v("#")]),t._v(" 求解的基本步骤")]),t._v(" "),v("p",[t._v("动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态\n")])])]),v("ol",[v("li",[t._v("划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。")]),t._v(" "),v("li",[t._v("确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。")]),t._v(" "),v("li",[t._v("确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻个阶段的状态之间的关系来确定决策方法和状态转移方程。")]),t._v(" "),v("li",[t._v("寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。")])]),t._v(" "),v("p",[v("strong",[t._v("一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程（包括边界条件）。")])]),t._v(" "),v("p",[t._v("际应用中可以按以下几个简化的步骤进行设计：")]),t._v(" "),v("ol",[v("li",[t._v("分析最优解的性质，并刻画其结构特征。")]),t._v(" "),v("li",[t._v("递归的定义最优解。")]),t._v(" "),v("li",[t._v("以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值（dp数组）")]),t._v(" "),v("li",[t._v("根据计算最优值时得到的信息，构造问题的最优解")])]),t._v(" "),v("p",[v("strong",[t._v("明确 base case -> 明确「状态」-> 明确「选择」 -> 定义 dp 数组/函数的含义")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("状态")])]),t._v(" "),v("li",[v("p",[t._v("选择")])]),t._v(" "),v("li",[v("p",[t._v("dp数组")])])]),t._v(" "),v("p",[t._v("动态规划一般用于求最值问题")]),t._v(" "),v("h2",{attrs:{id:"经典示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#经典示例"}},[t._v("#")]),t._v(" 经典示例")]),t._v(" "),v("ol",[v("li",[t._v("背包问题")]),t._v(" "),v("li",[t._v("最长上升子序列（LIS）")]),t._v(" "),v("li",[t._v("最长公共子序列（LCS）")]),t._v(" "),v("li",[t._v("塔树选择和最大问题")])]),t._v(" "),v("p",[t._v("参考：")]),t._v(" "),v("ul",[v("li",[v("p",[v("a",{attrs:{href:"https://labuladong.gitee.io/algo/3/22/54/",target:"_blank",rel:"noopener noreferrer"}},[t._v("动态规划详解"),v("OutboundLink")],1)])]),t._v(" "),v("li",[v("p",[v("a",{attrs:{href:"https://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741370.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("五大常用算法系列(opens new window)"),v("OutboundLink")],1)])]),t._v(" "),v("li",[v("p",[v("a",{attrs:{href:"https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《编程之法：面试和算法心得》"),v("OutboundLink")],1)])])])])}),[],!1,null,null,null);_.default=r.exports}}]);