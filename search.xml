<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Java线程、线程池、并发包(4)]]></title>
      <url>/2018/01/16/thread-04/</url>
      <content type="html"><![CDATA[<h2 id="1-Future与Callable"><a href="#1-Future与Callable" class="headerlink" title="1 Future与Callable"></a>1 Future与Callable</h2><p>使用Runnable接口有很大的局限性，他不能够返回一个值或者一个受检查的异常。这种情况下，可以使用Callable<v>接口，其中V就是返回的结果。</v></p>
<p>Future<v>用来接收callable结束后返回的结果。ExecuteService 的submit方法都是返回一个Future,可以利用Future获取执行的结果，同时可以利用Future取消任务。任务生命周期 创建，提交，执行，结束。如果任务提交，但是没有执行，可以使用Future 取消。</v></p>
<p>使用线程池(ThreadPoolExecute)的时候，ExecuteService的submit方法实际上使用的是AbstractExecutorService的submit。查看源码可以看到提交任务后返回的是 FutureTask<t></t></p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fun.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * callable示例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-04-01 10:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureCallableDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		FutureCallableDemo test = <span class="keyword">new</span> FutureCallableDemo();</span><br><span class="line"></span><br><span class="line">		ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">		<span class="comment">//do test</span></span><br><span class="line"><span class="comment">//		test.testCallableTask(executorService);</span></span><br><span class="line">		test.testRunableTask(executorService);</span><br><span class="line">		executorService.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallableTask</span><span class="params">(ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">		Callable&lt;String&gt; task = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"invoke method call, "</span> + System.currentTimeMillis());</span><br><span class="line">				Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">				System.out.println(<span class="string">"method call is going to return, "</span> + System.currentTimeMillis());</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"SUCCESS"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		Future&lt;String&gt; future = executorService.submit(task);</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"main is going to get callable future result, "</span> + System.currentTimeMillis());</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"callable result = "</span> + future.get());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"main got the future result, "</span> + System.currentTimeMillis());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRunableTask</span><span class="params">(ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">		Runnable runTask = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"invoke method run, "</span> + System.currentTimeMillis());</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">"method run is going to end, "</span> + System.currentTimeMillis());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		Future&lt;Integer&gt; runFuture = executorService.submit(runTask,<span class="keyword">new</span> Integer(<span class="number">100</span>));</span><br><span class="line"><span class="comment">//		Future&lt;?&gt; runFuture = executorService.submit(runTask); // 这两种方式区别，打开注释观察</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"main is going to get runnable future result, "</span> + System.currentTimeMillis());</span><br><span class="line">			System.out.println(<span class="string">"runnable result = "</span> + runFuture.get());</span><br><span class="line">			System.out.println(<span class="string">"main got the future result, "</span> + System.currentTimeMillis());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行会发现future.get() 方法是一个阻塞的方法，一直等到任务执行完成得到结果。</p>
<p><strong>思考</strong>：看上面例子可以看到一个问题，runnable的任务和callable的任务都是可以返回Futrue的，那么他们有什么区别呢 ？ </p>
<p>观察不难发现，Callable<v> 返回结果是在call方法执行完成后返回的，他返回什么结果可以是call里面的计算得到的，类型为V即可。他的结果是可变的，程序运行返回的是什么就是什么。</v></p>
<p>但是Runable的返回结果只是提前定义的一个结果，可预期正确执行后的一个结果。他的结果在任务提交的时候已经决定了具体的值。</p>
<h2 id="2-原子类-atomic"><a href="#2-原子类-atomic" class="headerlink" title="2 原子类 atomic"></a>2 原子类 atomic</h2><p>原子类是如何保证原子操作的？</p>
<p>回答这个问题之前，先一起来看一个原子类的源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AtomicInteger部分源码</span></span><br><span class="line"><span class="comment">// AtomicInteegr 加法操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = get();</span><br><span class="line">        <span class="keyword">int</span> next = current + delta;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment"> * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if successful. False return indicates that</span></span><br><span class="line"><span class="comment"> * the actual value was not equal to the expected value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码很关键的一个地方就是compareAndSwap (CAS) ，每次操作（写）之前，先比较一下值，确认没有被改过，才写数据。在compareAndSet的注释上面也很清楚的可以看到，只有当cuurent value==expect value的时候，才把value更新成update value。整个执行的原则就是： <strong><em>先检查后执行</em></strong></p>
<p>而compareAndSwapXXX是一个native的方法，是虚拟机底层的实现。</p>
<p>测试示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fun.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原子类操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-04-01 12:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicClassDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AtomicInteger aint = <span class="keyword">new</span> AtomicInteger(<span class="number">100</span>);</span><br><span class="line">		<span class="keyword">boolean</span> b = aint.compareAndSet(<span class="number">100</span>,<span class="number">200</span>); <span class="comment">// 修改expect与当前值不同测试</span></span><br><span class="line">		<span class="keyword">if</span> (b) &#123;</span><br><span class="line">			System.out.println(aint.get());</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(aint.getAndAdd(<span class="number">100</span>));</span><br><span class="line">		System.out.println(aint.get());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line">		AtomicClassDemo ref1 = <span class="keyword">new</span> AtomicClassDemo();</span><br><span class="line">		AtomicClassDemo ref2 = <span class="keyword">new</span> AtomicClassDemo();</span><br><span class="line">		System.out.println(<span class="string">"ref1="</span> + ref1);</span><br><span class="line">		System.out.println(<span class="string">"ref2="</span> + ref2);</span><br><span class="line">		AtomicReference&lt;AtomicClassDemo&gt; ref3 = <span class="keyword">new</span> AtomicReference&lt;&gt;(ref1);</span><br><span class="line">		System.out.println(<span class="string">"ref3 before set="</span> + ref3);</span><br><span class="line">		<span class="keyword">boolean</span> b2 = ref3.compareAndSet(ref2,ref1); <span class="comment">// 修改expect为ref1测试</span></span><br><span class="line">		System.out.println(b2);</span><br><span class="line">		System.out.println(<span class="string">"ref3 after set ="</span> + ref3);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> output:</span></span><br><span class="line"><span class="comment"> 200</span></span><br><span class="line"><span class="comment"> 200</span></span><br><span class="line"><span class="comment"> 300</span></span><br><span class="line"><span class="comment"> -------------------</span></span><br><span class="line"><span class="comment"> ref1=com.fun.concurrent.AtomicClassDemo@74a14482</span></span><br><span class="line"><span class="comment"> ref2=com.fun.concurrent.AtomicClassDemo@1540e19d</span></span><br><span class="line"><span class="comment"> ref3 before set=com.fun.concurrent.AtomicClassDemo@74a14482</span></span><br><span class="line"><span class="comment"> false</span></span><br><span class="line"><span class="comment"> ref3 after set =com.fun.concurrent.AtomicClassDemo@74a14482</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-lock与ReentrantLock"><a href="#3-lock与ReentrantLock" class="headerlink" title="3 lock与ReentrantLock"></a>3 lock与ReentrantLock</h2><p>此小节重点学习下ReentrantLock,区别于内置锁，ReentrantLock是一个显示锁。他那有那些特性呢？</p>
<h3 id="3-1-轮询锁和定时锁"><a href="#3-1-轮询锁和定时锁" class="headerlink" title="3.1 轮询锁和定时锁"></a>3.1 轮询锁和定时锁</h3><p>使用tryLock() 方法可以在不能获取到锁的情况下，使用定时或者轮询的方式获取所，执行时间内没有完成就释放锁，平滑的退出任务。而内置锁会阻塞在获取锁的地方，一旦操作不当就可能发生死锁，如果出现死锁了，唯一的解决办法就是重启程序。<strong>使用定时或者轮询锁可以有效的避免死锁的问题</strong>。</p>
<p>转账示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fun.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/4/12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ReentrantLockDemo test = <span class="keyword">new</span> ReentrantLockDemo();</span><br><span class="line"></span><br><span class="line">        Account fromAcct = test.newAccount(<span class="number">4000</span>);</span><br><span class="line">        Account toAcct = test.newAccount(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        test.transferMoney(fromAcct,toAcct,<span class="number">1000L</span>,<span class="number">20000</span>,TimeUnit.NANOSECONDS);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"fromAccount balance="</span> + fromAcct.getBalance() + <span class="string">"\ntoAccount balance="</span> + toAcct.getBalance());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转账示例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transferMoney</span><span class="params">(Account fromAcct,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Account toAcct,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">long</span> amount,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">long</span> timeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stopTime = System.nanoTime() + unit.toNanos(timeout); <span class="comment">// 超时时间</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fromAcct.lock.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (toAcct.lock.tryLock()) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">boolean</span> rs = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (fromAcct.debit(amount) )&#123;</span><br><span class="line">                                rs = toAcct.credit(amount);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span> rs;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            toAcct.lock.unlock();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    fromAcct.lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (System.nanoTime() &gt; stopTime) &#123; <span class="comment">// 如果已经超时了，就直接返回，提前结束任务</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> x = <span class="keyword">new</span> Random().nextInt(<span class="number">50</span>) + <span class="number">10</span>;</span><br><span class="line">                Thread.sleep(timeout/x ); <span class="comment">// 过一会儿再尝试下一次获取锁</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> balance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">debit</span><span class="params">(<span class="keyword">long</span> amount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (balance &lt; amount) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            balance = balance - amount;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">credit</span><span class="params">(<span class="keyword">long</span> amount)</span> </span>&#123;</span><br><span class="line">            balance = balance + amount;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*getter and setter*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">newAccount</span><span class="params">(<span class="keyword">long</span> balance)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            account.setBalance(balance);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            account.setBalance(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在几次获得锁的地方，都是trylock, 在多线程的情况下，如果没有获得锁的时候，线程并不会阻塞，而是之后往后面运行。进入判断是否超时的语句。如果超时就退出，可以避免等待加锁可能出现的死锁问题。</p>
<p><em>注意：但是使用显示锁人的时候，很容易在编写程序的时候忘记了释放锁，切记，在使用显示锁的时候一定要在try-finally 的finally里面对锁进行释放。</em></p>
<h3 id="3-2-可中断的锁操作"><a href="#3-2-可中断的锁操作" class="headerlink" title="3.2 可中断的锁操作"></a>3.2 可中断的锁操作</h3><p>lockInterruptibly()方法,可中断的获取锁的方式，在获取锁的过程中可能被中断，方法本身是可以抛出InterruptException的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 此方法源码</span><br><span class="line"> public void lockInterruptibly() throws InterruptedException &#123;</span><br><span class="line">    sync.acquireInterruptibly(1);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>他的使用和不同lock和tryLock一样，只是需要在外面处理lockInterruptibly的InterruptException.</p>
<h3 id="3-3-非块结构加锁"><a href="#3-3-非块结构加锁" class="headerlink" title="3.3 非块结构加锁"></a>3.3 非块结构加锁</h3><p>对链表上的每个节点单独建立锁，使不同的线程可以独立的对链表的不同部分进行操作。所得很模糊，需要结合ConcurrentHashMap理解</p>
<h3 id="3-4-公平性"><a href="#3-4-公平性" class="headerlink" title="3.4 公平性"></a>3.4 公平性</h3><p>公平性是在竞争资源时候的一种策略，大部分情况都是使用公平原则来获取锁，例如：FIFO 队列。但是，有时候前面的操作比较耗时的时候，会拖慢整个处理速率，这个时候不公平原则可以提前获得锁。例如，线程A获得一个对象的锁，现线程B和C都在等待这个锁，当A释放锁的时候，如果B唤醒的时间比较的久，此时C先获得锁，使用了并释放了，B刚好唤醒，获得锁。这个过程B的时间没有耽误。同时C也处理了，增加了吞吐量。但是，我还要说但是。使用不公平性的时候同样会有问题，不公平的比较极端的情况就是找出一个线程一直拿不到锁，一直等待。所以使用时候需要权衡和控制。</p>
<p>ReentrantLock 可以设置不保证公平性。</p>
<h2 id="4-CountDownLatch-amp-Semaphore"><a href="#4-CountDownLatch-amp-Semaphore" class="headerlink" title="4 CountDownLatch &amp; Semaphore"></a>4 CountDownLatch &amp; Semaphore</h2><h3 id="4-1-CountDownLatch"><a href="#4-1-CountDownLatch" class="headerlink" title="4.1 CountDownLatch"></a>4.1 CountDownLatch</h3><p>CountDownLatch 有什么作用呢 ？它就是一个同步助手，它能够让一个或者多个线程等到另外的线程完成一系列的操作之后再执行。</p>
<p>内部有一个倒数计数器，当倒数计数器减到0的时候释放锁。</p>
<p>先看示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fun.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CountDownLatch 使用和测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-04-13 17:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		CountDownLatchDemo test = <span class="keyword">new</span> CountDownLatchDemo();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">		CountDownLatch startSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">		CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(N);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(test.newWorker(startSignal,doneSignal)).start();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"do something else 1"</span>);</span><br><span class="line">			startSignal.countDown();</span><br><span class="line">			System.out.println(<span class="string">"do something else 2"</span>);</span><br><span class="line">			doneSignal.await();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Worker <span class="title">newWorker</span><span class="params">(CountDownLatch startSignal, CountDownLatch doneSignal)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Worker(startSignal,doneSignal);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch startSignal;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch doneSignal;</span><br><span class="line"></span><br><span class="line">		Worker(CountDownLatch startSignal, CountDownLatch doneSignal) &#123;</span><br><span class="line">			<span class="keyword">this</span>.startSignal = startSignal;</span><br><span class="line"> 			<span class="keyword">this</span>.doneSignal = doneSignal;</span><br><span class="line"> 		&#125;</span><br><span class="line">	 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				startSignal.await();</span><br><span class="line">				doWork();</span><br><span class="line">				doneSignal.countDown();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;&#125; <span class="comment">// return;</span></span><br><span class="line"> 		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">200</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">"do something..."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此示例中，所有Runnable共享一个startSignal 和 一个 doneSignal。CountDownLatch的 await() 方法等待计数器变为0在唤醒。而在执行countDown() 方法的时候，每次countDown<br>就会是计数器减一，知道减少为0才释放。</p>
<p>查看源码中countDown 的过程<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// countDown</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sync.releaseShared</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tryReleaseShared 在countDownLatch中的Sync中有重写父类的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Decrement count; signal when transition to zero</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">            <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>很显然，只有当count=0的时候才会释放锁。在回头看上面的示例程序，分析如下：</p>
<ol>
<li>startSignal.countDown(); Runnable任务线程创建并start了，但是出于wait状态，等待计数器变为0，次代码操作把计数器减一变为0，所有任务开始工作。</li>
<li>System.out.println(“do something else 2”);主线程忙其他事情</li>
<li>doneSignal.await();所有任务完成之前，主线程从此处开始阻塞(挂起等待)。doneSignal计数器不变为0，主线程一直挂起。完成一个任务，count-1,直到所有任务完成，count=0,主线程醒过来并完成后面的动作。</li>
</ol>
<p>利用CountDownLacth 能做很多事，例如进项大数据的一个累加，可以分成多个线程处理，然后在主线程中合并(累加)多个任务的结果。增加处理速率（这个有点像MapReduce的思想）。</p>
<p><strong>思考</strong>： 其实看了CountDownLatch 之后，发现和volatile+synchronized效果很像。完全可以控制一个volatile的count变量等于任务数，完成一个任务，count-1,主线程wait,等到count=0。 效果差不多。但是代码实现上就较CountDownLatch 复杂点。所有有类似这样的功能，应该优先想到CountDownLatch</p>
<h3 id="4-2-Semaphore"><a href="#4-2-Semaphore" class="headerlink" title="4.2 Semaphore"></a>4.2 Semaphore</h3><p>使用信号量的时候，一个线程想要获得一个item,必须要先从Semaphore那里获得许可(permit)，保证item是可用的。当线程完成任务的时候，在向pool归还item同时还需要向Semaphore归还许可，以便其他线程可以使用item。需要注意的是，<strong>当调用acquire的时候，不需要额外加锁限制，因为这样将会阻止item被归还到pool。</strong> 实际上Semaphore已经封装了同步锁来保证item的获取，并且pool对每个item有单独的维护。</p>
<p>当Semaphore被初始化成一个并且只有之多一个许可的时候，他就表现成了一个互斥锁。这个更像一个Binary Semaphore一样，因为他只有两个状态： 有一个可用许可，没有可用许可。当以这种方式使用的时候，semaphore 和其他Lock的实现不同，他能够允许锁被线程本身释放，而不是锁的所有者。</p>
<p>Semaphore 构造方法有个释放使用公平锁的方式。当使用不公平锁的时候，不保证获取许可的先后顺序。公平性在前文有说过，有时候可以提高吞吐量，避免一直等待。但是也同样也会出现一直获取不到锁也进去一直等待。</p>
<p>Semaphore可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池</p>
<p><strong>实现分析：</strong></p>
<p>Semaphore 实现和CountDownLatch有几分相似：</p>
<ol>
<li>CountDownLatch里面有个count计数器，每次操作countDown 则count = count-1 ,当count==0 的时候才释放所</li>
<li>Semaphore 则是内部维护一个available的数量，每次减去获取permits的数量，得到剩余的数量，释放锁的时候available加上归还的permit的数量。获取的锁的过程就是对available减操作，release则是加回对available的操作。</li>
</ol>
<p>Semaphore默认实现是不公平性的，就以不公平性的实现来看吗：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nonfairTryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> available = getState();</span><br><span class="line">        <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">            compareAndSetState(available, remaining))</span><br><span class="line">            <span class="keyword">return</span> remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = getState();</span><br><span class="line">        <span class="keyword">int</span> next = current + releases;</span><br><span class="line">        <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum permit count exceeded"</span>);</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>选取源码中关键的两个方法吗，加锁和解锁。</p>
<ol>
<li><strong>获取permit</strong>： 先使用getState后去当前可用的permit的数量，剩余数量=当前数量-申请的数量，然后再执行CAS设置状态,并返回剩余可用数量。</li>
<li><strong>释放锁</strong>：释放锁的过程时间就是归还permit可用数量的过程。当前可用数量+归还数量&lt;当前数量的是时候，或者已经溢出，归还数量为负数了，如果current + releases &gt;=cuurent,执行CAS 设置状态值。</li>
</ol>
<h2 id="5-ConcurrentHashMap"><a href="#5-ConcurrentHashMap" class="headerlink" title="5 ConcurrentHashMap"></a>5 ConcurrentHashMap</h2><p>使用分段锁(Lock striping)的方式，使锁的粒度更细来实现更大程度的共享，提高并发性和伸缩性。</p>
<blockquote>
<p>锁分段(Lock striping)：在某些情况下，可以将锁分解技术进一步扩展为对一组独立对象上的锁进行分解。这种情况被称为锁分段。</p>
</blockquote>
<p>例如： 在concurrentHashMap 中使用一个包含16个锁的数组，每个锁保护一个散列桶，其中第N个散列桶由第（N mod 16）个锁来写入。假设散列函数具有合理性，并且关键字分布均匀，那么这大约能都把对于锁的请求减少到原来1/16。正是这项技术使得ConcurrentHashMap能够支持多大16个并发的写入器。</p>
<p>锁分段劣势： 与采用单个锁来实现独占访问相比，要获取多个锁来实现独占访问将更加困难并且开销更高。例如：ConcurrentHashMap在扩容的时候，以及重新计算Hash并且重新散列分布时候，都需要获取所有锁，实现整个Map的独占访问。</p>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 并发包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java线程、线程池、并发包(3)]]></title>
      <url>/2018/01/15/thread-03/</url>
      <content type="html"><![CDATA[<h2 id="1-线程池-java-util-concurrent"><a href="#1-线程池-java-util-concurrent" class="headerlink" title="1.线程池(java.util.concurrent)"></a>1.线程池(java.util.concurrent)</h2><p>为什么要有线程池 ？</p>
<p>我们知道。使用线程来处理任务，可以达到一定程度的并行计算的效果，在一些比较耗时的操作时候不用一直等待，比如以下i/o操作。那么每次需要的时候就创建一个线程来处理这种任务就好了，为什么要引入线程池这个概念呢？</p>
<p>主要存在三方面的原因：</p>
<ol>
<li><strong>线程生命周期的开销非常高。</strong> 创建线程是需要时间的，并且需要JVM和底层操作系统提供一些辅助的支持，无限创建线程，必定在创建线程的时候消耗很多资源。</li>
<li><strong>资源消耗。</strong> 活跃的线程必定要占据一定的内存，线程越多，使用的内存越大。当可运行的线程多于可用的处理器数量的时候，线程就会闲置。大量的闲置线程就会占据大量内存，给垃圾回收带来很多的压力。而且这些线程在资源CPU竞争的时候也将产生更大的开销。</li>
<li><strong>稳定性。</strong> 之前的JVM的OOM中有提到过，过多的线程还会可能出现OOM异常。因为线程数量受制于JVM的参数配置，Thread构造方法中的请求栈大小，以及底层操作系统对线程的闲置，一旦超出就会出现OOM的异常</li>
</ol>
<p>所以，使用线程池，用它来管理线程，可以有效的减少因为线程创建和线程数量过多导致的问题</p>
<h2 id="1-1-Executor框架"><a href="#1-1-Executor框架" class="headerlink" title="1.1 Executor框架"></a>1.1 Executor框架</h2><h3 id="1-1-1-框架基础"><a href="#1-1-1-框架基础" class="headerlink" title="1.1.1 框架基础"></a>1.1.1 框架基础</h3><p>先来看看住基本的框架结构图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4752922-cb11c80a4616ee27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="executor"></p>
<p><strong>1. 主要元素：</strong></p>
<ol>
<li>顶层是一个Executor接口，主要常用的实现类是ThreadPoolExecutor和ScheduledThreadPoolExecutor</li>
<li>BlockingQueue接口及其实现</li>
<li>Future接口以及实现</li>
<li>Executors 创建线程池的关键类</li>
</ol>
<p><strong>2. 框架执行原理</strong></p>
<p>关于执行原理，说到这个问题，不得不说jdk源码的作者写代码真是习惯好，跟进源码，查看Executor接口，在类上面，很大段的解释和说明，还有示例代码来说明。相比周围的我们写的代码，简简单单的几行注释，甚至有的完全写出来就是没有注释，试问这样代码怎么看。很多时候我觉得写代码好不好，代码风格和格式很重要。</p>
<p>回答我们刚才的话题，一起来看看Executor接口上面的注释吧 </p>
<p><strong>2.1 Excutor接口</strong></p>
<p>我们去看源码就发现，<code>Executor</code>接口只有个方核心方法<code>execute</code>,接收的参数是<code>Runnable</code>。Runnable在jdk里面，我们都称之为Task也就是要执行的任务，使用Executor可是避免我们反复的使用<code>new Thread(new(RunnableTask())).start()</code>。当有很多任务需要执行的时候，可以如下的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步执行任务</span></span><br><span class="line"> Executor executor = anExecutor; <span class="comment">// 此处伪代码，实现时候就是使用Executors创建一个子类</span></span><br><span class="line"> executor.execute(<span class="keyword">new</span> RunnableTask1());</span><br><span class="line"> executor.execute(<span class="keyword">new</span> RunnableTask2());</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></p>
<p>上面的代码，会使得多个任务异步的执行。在executor源码注释上有写明，这个接口也可以不要求任务是异步执行的，一个简单例子就是直接执行提交的任务的run方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接同步执行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        r.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是更典型的方式使用一个线程来执行任务而不是使用run方法，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个任务一个线程异步去执行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPerTaskExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而在Executor框架中，<code>Executor</code>的实现类都是解决的批量任务的执行顺序和时间的问题。下面的例子是一个顺序执行的Executor的一个实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多任务顺序执行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Queue&lt;Runnable&gt; tasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">    <span class="keyword">final</span> Executor executor;</span><br><span class="line">    Runnable active;</span><br><span class="line"></span><br><span class="line">    SerialExecutor(Executor executor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">        tasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    scheduleNext();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (active == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduleNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((active = tasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            executor.execute(active);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面这个例子基本能简单表现出执行任务的思路，值得注意的一点就是，这个jdk注释中的例子在executor中引入了一个任务队列，再把队列中的任务取出顺序执行。在JDK提供的Executor的实现类中，使用workQueue来存储需要执行的任务，使用一个Worker集合works来执行任务（不同于上例中的顺序执行，且上例中工作线程相当于只有一个）。执行Worker启动后执行完自己的runnable后还会从workQueue中继续获取任务执行，直到任务队列为空。</p>
<p><strong>2.2 ExecutorService 接口</strong></p>
<p>ExecutorService接口继承自Executor 接口，主要增加了线程生命周几管理的几个方法以及Future 来跟踪任务一个或多个异步任务的处理情况。</p>
<p>其中</p>
<ol>
<li>shutDown() 关闭executor，已经提交的任务会被执行，新的任务不会再接受 </li>
<li>shutDownNow() 立即关闭executor,停止执行，并返回一个等待执行的任务列表</li>
<li>isShutDown() executor是否终止</li>
<li>isTerminated() 所有任务执行完成，只有在调用了shutDown或者shutDownNow之后，才会返回true</li>
<li>submit() 几种提交任务的方式 </li>
</ol>
<p><strong>2.3 Executors</strong></p>
<p>提供各种方法创建线程池，从大的方向看，线程主要分为两类，一种就是不同的异步执行的，一种就是实现了ScheduledExecutorService 接口的线程，两类线程的区别在于在于ScheduledExecutorService是那种有计划执行的任务，比如说定时任务或者延时执行的任务。</p>
<p>具体使用查看Executors.newXXX() 相关文档</p>
<h3 id="1-1-2-ThreadPoolExecutor-amp-ScheduledThreadPoolExecutor"><a href="#1-1-2-ThreadPoolExecutor-amp-ScheduledThreadPoolExecutor" class="headerlink" title="1.1.2. ThreadPoolExecutor &amp; ScheduledThreadPoolExecutor"></a>1.1.2. ThreadPoolExecutor &amp; ScheduledThreadPoolExecutor</h3><p>ThreadPoolExecutor 和 ScheduledThreadPoolExecutor 都是executorService的实现类，他们关系从之前类图已经可以清楚地看出来。基本使用差不多，却别就在于定位或者延时功能。所以本文只分析ThreadPoolExecutor的源码，来看看线程池的工作大致流程。</p>
<h4 id="1-1-2-1-ThreadPoolExecutor源码分析"><a href="#1-1-2-1-ThreadPoolExecutor源码分析" class="headerlink" title="1.1.2.1 ThreadPoolExecutor源码分析"></a>1.1.2.1 ThreadPoolExecutor源码分析</h4><p>在分析源码前，我根据个人的理解，先简单说明线程池工作的流程，在进入代码查看。</p>
<p>之前在看JDK的Executor接口的文档的时候，在源码上面的标准注释里面的例子（也是生成的javadoc里面的注释）的最后一个，有提到过一个概念，<strong>任务队列</strong>。前文还简单说了下具体实现类和那个例子的不同。现在来具体看看，在说之前，先明白几个概念。</p>
<ol>
<li>工作队列 <code>BlockingQueue&lt;Runnable&gt; workQueue</code>。存放所有的runnable任务。</li>
<li>工作线程集合 <code>HashSet&lt;Worker&gt; workers</code>。线程池中所有的工作线程集合</li>
</ol>
<p>Runnable都清楚是什么，Woker呢，先看看worker类可能更能方便理解线程池的工作过程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Woker</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This class will never be serialized, but we provide a</span></span><br><span class="line"><span class="comment">         * serialVersionUID to suppress a javac warning.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6138294804551838833L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class="line">        <span class="keyword">final</span> Thread thread;</span><br><span class="line">        <span class="comment">/** Initial task to run.  Possibly null. */</span></span><br><span class="line">        Runnable firstTask;</span><br><span class="line">        <span class="comment">/** Per-thread task counter */</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">long</span> completedTasks;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates with given first task and thread from ThreadFactory.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> firstTask the first task (null if none)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Worker(Runnable firstTask) &#123;</span><br><span class="line">            setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">            <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">            <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Delegates main run loop to outer runWorker  */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            runWorker(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>很明显就是有个线程，一个任务，和任务完成数量，核心方法是runWorker</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runWorker</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">        Thread wt = Thread.currentThread();</span><br><span class="line">        Runnable task = w.firstTask;</span><br><span class="line">        w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">        w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">        <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">                <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">                <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">                <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">                <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                     (Thread.interrupted() &amp;&amp;</span><br><span class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                    wt.interrupt();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeExecute(wt, task);</span><br><span class="line">                    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterExecute(task, thrown);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            processWorkerExit(w, completedAbruptly);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>runWorker做的事情很明确，如果Worker创建的时候带了任务，则执行这个任务的run()方法，如果没有就去执行getTask()在workQueue中获得一个任务来执行，直到没任务可执行为止。</p>
<p>在回头看execute方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">         * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">         * threads when it shouldn't, by returning false.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">         * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">         * and so reject the task.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这段执行逻辑：</p>
<ol>
<li>查看当前Worker(工作线程)数量有没有达到coreSize,没有就创建一个工作线程</li>
<li>如果线程池没有关闭，并且添加到队列成功，再次执行下检测，或者拒绝，或者由于工作线程没有重新添加工作线程。这个分支需要注意的是，可能这个分支走完只添加了任务，没有添加线程。也就是重复利用线程。利用已有的工作线程自己去队列中消费任务。例外注意runWorker里面使用的getTask() 实际是个阻塞的，一直循环在取队列中的任务，取不到一直循环，这个线程就会一直在。runWorker也是个死循环一直执行task.run。所以线程中的线程其实一直在运行的。但是getActiveCount 是去HashSet<worker> workers 里面的上锁(在执行run的线程，而不是在getTask的)的线程数量。</worker></li>
<li>添加任务失败的时候，直接拒绝</li>
</ol>
<p>这里另外说一下，。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addWorker 部分代码</span></span><br><span class="line">...</span><br><span class="line">w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line"> <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">        t.start();</span><br><span class="line">        workerStarted = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>addWorker最后会启动worker的私有属性thread的线程，开始执行runWorker,同事把worker添加到HashSet<worker>中<br>由于worker的构造函数中<code>this.thread = getThreadFactory().newThread(this);</code> 所以woker的thread启动的时候，执行的就是Wroker的run，即threadPoolExecutor的runWorker方法。整个执行链如下：</worker></p>
<p><code>ThreadPoolExecutor.execute()--&gt;addWorkder(可能添加成功或者失败，失败是涉及到拒绝处理问题)--&gt;Workder.thread.start()--&gt;Worker.run--&gt;threadPoolExecutor.runWorker--&gt;循环执行getTask、task.run</code></p>
<p>以上就是线程基本的执行流程了，观察ThreadPoolExecutor的完整参数的构造方法发现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br></pre></td></tr></table></figure></p>
<p>其中ThreadFactory 是用来创建Worker的thread用的，管理所有的线程。<br>RejectedExecutionHandler handler是在addWorker的时候如果添加失败，执行的饱和策略。JUC(java.util.concurrent)包中有提供几种实现。也可以根据需要自己实现自己的饱和策略。</p>
<h4 id="1-1-2-2-Exexutors-newXXX的参数意义和是使用时候注意的问题"><a href="#1-1-2-2-Exexutors-newXXX的参数意义和是使用时候注意的问题" class="headerlink" title="1.1.2.2 Exexutors.newXXX的参数意义和是使用时候注意的问题"></a>1.1.2.2 Exexutors.newXXX的参数意义和是使用时候注意的问题</h4><ol>
<li><p><strong>newFixedThreadPool</strong><br>创建一个固定长度的线程池，每次提交任务就会创建线程，知道达到最大线程数。如果线程发生Exception死掉，会新补充线程进来。默认工作队列最大长度是Integer.MXA_VALUE。认为是一个无界的队列</p>
</li>
<li><p><strong>newCachedThreadPool</strong><br>创建一个可缓存的线程池，如果线程池的当前规模超出了处理需求，就回收空闲线程，如果需求增加就添加新的线程。线程值规模不受限制，所以在使用的时候，操作不当可能创建很多线程导致OOM。<br>使用的队列是SynchronousQueue.</p>
</li>
<li><p><strong>newScheduledThreadPool</strong><br>创建固定长度线程池，而且以延迟或定时的方式来执行任务</p>
</li>
<li><p><strong>newSingleThreadExecutor、newSingleThreadScheduledExecutor</strong><br>创建一个单线程的Executor，如果单个线程出现Exeception死掉，就是创建一个线程来替代。他可以确保任务队列中的任务是顺序执行的。</p>
</li>
</ol>
<h2 id="1-2-线程池任务管理-Queue-amp-Deque"><a href="#1-2-线程池任务管理-Queue-amp-Deque" class="headerlink" title="1.2. 线程池任务管理 Queue &amp; Deque"></a>1.2. 线程池任务管理 Queue &amp; Deque</h2><p>ThreadPoolExecutor提供了三中队列方式：无界队列、有界对列、同步移交。队列的选择与其他的参数有关，例如：线程池的大小。</p>
<p><strong>无界、有界队列</strong>。使用无界队列当线程池中的线程都处于忙碌状态的时候，工作队列就会无限制的增长。一种更加稳妥的方式使用有界队列，例如：ArrayBlockingQueue，有界LinkedBlockingQueue，PriorityBlockingQueue。有界队列有助于避免资源耗尽情况的发生，但是就需要考虑队列填满时候的饱和策略问题。</p>
<p><strong>同步移交</strong>。对于非常大或者无界的线程池，可以使用SynchronousQueue来避免任务排队，以及直接将任务从生产者直接移交给工作线程，移交的时候必须要求有线程等待接受，如果没有切线程池线程数小于最大线程，就创建线程接受，否则就拒绝。</p>
<p><strong>执行顺序</strong> 。ArrayBlockingQueue 和 PriorityBlockingQueue是FIFO类型队列，如果想进一步的控制任务执行的顺序，可以使用PriorityBlockingQueue来进行管理，任务优先级是通过自然顺序或者Comparator接口来定义的。</p>
<p><strong>注意：只有当任务相互独立是，为线程池或者工作队列设置界限才是合理的，如果任务之间存在依赖，那么有界的线程池或者队列就可能导致“饥饿”死锁问题</strong></p>
<h2 id="1-3-线程池饱和策略-RejectedExecutionHandler"><a href="#1-3-线程池饱和策略-RejectedExecutionHandler" class="headerlink" title="1.3 线程池饱和策略 RejectedExecutionHandler"></a>1.3 线程池饱和策略 RejectedExecutionHandler</h2><p>当有界队列被填满的时候，饱和策略就开始发挥作用了。ThreadPoolExecutor的饱和策略可以通过调用setRejectedExecutionHandler来修改。JDK提供了四种默认的饱和策略。</p>
<p><strong>AbortPolicy</strong> 默认策略，抛出一个未经检测的RejectedExecutionException,调用者捕获这个异常，根据自己的需求编写自己的代码。</p>
<p><strong>DiscardPolicy</strong> 抛弃策略， 当新的任务无法添加到队列的时候，默默的抛弃该任务</p>
<p><strong>DiscardOldestPolicy</strong> 抛弃最早策略，次策略会抛弃写一个要执行的任务，然后尝试提交任务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">        e.getQueue().poll();</span><br><span class="line">        e.execute(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因此如果是个优先队列，则抛弃优先级最高的策略，所有不建议这个策略和优先队列一起使用</p>
<p><strong>CallerRunsPolicy</strong> 调用者直接执行run策略，这种直接在调用者的线程执行任务的run方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">        r.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因为直接下调用者里面执行的任务，所有会是一个同步的效果，就会带来响应的延时。</p>
<p>以上四种是JDK提供的策略，我们还可以根据自己的需要，自己实现RejectedExecutionHandler，实现我们自己的饱和策略。</p>
<h2 id="1-4-线程池如何重复利用线程的-？"><a href="#1-4-线程池如何重复利用线程的-？" class="headerlink" title="1.4 线程池如何重复利用线程的 ？"></a>1.4 线程池如何重复利用线程的 ？</h2><h3 id="1-4-1-ThreadFactory"><a href="#1-4-1-ThreadFactory" class="headerlink" title="1.4.1 ThreadFactory"></a>1.4.1 ThreadFactory</h3><p>线程工厂是创建线程的地方，实际就是创建工作线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultthreadFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(group, r,</span><br><span class="line">                          namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                          <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">        t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">        t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-2-线程池如何重复利用线程？"><a href="#1-4-2-线程池如何重复利用线程？" class="headerlink" title="1.4.2 线程池如何重复利用线程？"></a>1.4.2 线程池如何重复利用线程？</h3><p>通过前面对线程池的理解，线程池的实现思路基本有一定的了解，那么线程池究竟如何重复利用线程的呢？</p>
<p>其实这里的“重复” 并没有放开重新获取，而是工作线程一直运行。当运行的线程数量没有达到coreSize的时候，不管任务多少，新来任务会重新创建工作线程。工作线程中执行的是死循环一直获取任务来执行。通过使用工作线程来执行任务的run方法达到避免创建线程的目的。前面源码分析部分，查看execute、addWorker、runWorker、getTask 四个方法就很明了。</p>
<ol>
<li>execute: 添加工作线程，或者只添加任务、或者拒绝任务</li>
<li>addWorker: 实际上的创建工作线程，并start</li>
<li>runWorker: 工作线程的run方法里面执行的代码，循环取队列的中的任务进行执行。</li>
<li>getTask: 一直去任务，队列为空就一直循环直到取到值或者线程池关闭。</li>
</ol>
<p>所以线程池的工作线程一点启动，是一直在运行的。没有任务可执行的时候，也是在执行，只不过这个时候是阻塞在了getTask方法中。所以千万不要理解成线程池做完任务就把线程放回去，要用的时候在拿出来。</p>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线程池 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java线程、线程池、并发包(2)]]></title>
      <url>/2018/01/14/thread-02/</url>
      <content type="html"><![CDATA[<h2 id="java的线程Thread"><a href="#java的线程Thread" class="headerlink" title="java的线程Thread"></a>java的线程Thread</h2><blockquote>
<p>现在的操作系统是多任务操作系统。多线程是实现多任务的一种方式。</p>
<p>进程是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。</p>
<p>线程是指进程中的一个执行流程，一个进程中可以运行多个线程。比如java.exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。</p>
</blockquote>
<p>引用网上对线程的一个说法，个人觉得比较的形象</p>
<h2 id="1-1-线程的创建和启动"><a href="#1-1-线程的创建和启动" class="headerlink" title="1.1 线程的创建和启动"></a>1.1 线程的创建和启动</h2><h3 id="1-1-1-线程创建"><a href="#1-1-1-线程创建" class="headerlink" title="1.1.1 线程创建"></a>1.1.1 线程创建</h3><p>创建线程方式主要有两个：</p>
<ol>
<li>继承Thread类，利用构造方法创建一个线程</li>
<li>实现Runnable接口。在利用带Runnable参数的构造方法</li>
</ol>
<p>看例子：</p>
<p><strong>1. 实现Thread类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> minPrime;</span><br><span class="line">        PrimeThread(<span class="keyword">long</span> minPrime) &#123;</span><br><span class="line">            <span class="keyword">this</span>.minPrime = minPrime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// compute primes larger than minPrime</span></span><br><span class="line">             . . .</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">PrimeThread p = <span class="keyword">new</span> PrimeThread(<span class="number">143</span>);</span><br><span class="line">p.start();</span><br></pre></td></tr></table></figure>
<p><strong>2. 实现Runnable 接口</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PrimeRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">         <span class="keyword">long</span> minPrime;</span><br><span class="line">         PrimeRun(<span class="keyword">long</span> minPrime) &#123;</span><br><span class="line">             <span class="keyword">this</span>.minPrime = minPrime;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="comment">// compute primes larger than minPrime</span></span><br><span class="line">              . . .</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">PrimeRun p = <span class="keyword">new</span> PrimeRun(<span class="number">143</span>);</span><br><span class="line">     <span class="keyword">new</span> Thread(p).start();</span><br></pre></td></tr></table></figure>
<h3 id="1-1-2-Thread和Runnable"><a href="#1-1-2-Thread和Runnable" class="headerlink" title="1.1.2 Thread和Runnable"></a>1.1.2 Thread和Runnable</h3><p>看了上面分别使用继承的方式和runnable接口的方式，那他们又有何不同呢</p>
<p>其实看看两者的代码区别就知道了，如果继承的话，每次new Thread创建一个新的线程，然而runnable的方式虽然也是每次new Thread() ，但是，<strong>构造方法中的runnable可以是同一个也可以是每次new一个</strong>。这点可以有很大的区别，可以很好利用</p>
<p>假如我们线程有个自己的私有成员，对应使用继承Thread 的方式，每次new ,这个私有成员一定是自己所有的。但是使用runnable的话，就不一定了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.fun.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现runnable接口的任务类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-03-13 21:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskId;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 可以做共享变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestTask</span><span class="params">(<span class="keyword">int</span> taskId,<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskId = taskId;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"taskId is:"</span>+taskId+<span class="string">" , count is:"</span>+count);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"threadId: "</span>+Thread.currentThread().getId()+</span><br><span class="line">                    <span class="string">", threadName: "</span>+Thread.currentThread().getName()+</span><br><span class="line">                    <span class="string">",isDaemon "</span> + Thread.currentThread().isDaemon());</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            count--;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码是一个实现runnable接口的任务。请看在使用时候的区别</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// 1. 每个线程都有一个新的Runnable</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> TestTask(i + <span class="number">1</span>, <span class="number">10</span>)).start();</span><br><span class="line">			Thread.sleep(<span class="number">200</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span>  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		TestTask testTask = <span class="keyword">new</span> TestTask(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(testTask).start();</span><br><span class="line">			Thread.sleep(<span class="number">200</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>上面结果</p>
<ol>
<li>test1中，每次new TestTask传递给Thread,所以打印的都是count=10</li>
<li>test2中，每个Thread其实都是用的一个runnable构造，这个时候他们共享TestTask的count值。打印的count减小了</li>
</ol>
<p>所以这里可以利用这个特点处理共享资源，只要合理加锁，就可以处理好共享资源，如上面count加上volatile 保证可见性，再count– 加块级锁就ok</p>
<h3 id="1-1-3-线程启动"><a href="#1-1-3-线程启动" class="headerlink" title="1.1.3 线程启动"></a>1.1.3 线程启动</h3><p>之前也有代码使用过线程，线程启动一般使用 start() 或者 run() 但是一般建议是start()</p>
<p>为什么建议使用start() ?</p>
<p><strong>其实使用run()和start()，最终都是调用的run,最重要的区别在于，执行方法的线程是谁。<br>使用 start() 方法，是新建立的线程在执行，然而使用run()时候，是run()调用处的线程</strong>（如果在主线程直接调用了run() ,操作run()的线程就是main,并不是生成的新的线程）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRunAndStartDiff</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">"main threadId: "</span>+Thread.currentThread().getId()+</span><br><span class="line">					<span class="string">",main threadName: "</span>+Thread.currentThread().getName()+</span><br><span class="line">					<span class="string">",isDaemon "</span> + Thread.currentThread().isDaemon());</span><br><span class="line">	Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TestTask(<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line">	t.start();</span><br><span class="line"></span><br><span class="line">	Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TestTask(<span class="number">2</span>,<span class="number">20</span>));</span><br><span class="line">	t2.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main threadId: <span class="number">1</span>,main threadName: main,isDaemon <span class="keyword">false</span></span><br><span class="line">taskId is:<span class="number">2</span> , count is:<span class="number">20</span></span><br><span class="line">threadId: <span class="number">1</span>, threadName: main,isDaemon <span class="keyword">false</span></span><br><span class="line">taskId is:<span class="number">1</span> , count is:<span class="number">10</span></span><br><span class="line">threadId: <span class="number">11</span>, threadName: Thread-<span class="number">0</span>,isDaemon <span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>可以看到 Task 2 是用的run() ,实际上是ThreadId=1 的线程执行的（main）<br>Task1 是自己生成的线程（ThreadId=11）执行的</p>
<p>所以，注意是谁执行自己，在多线程处理的时候，取Thread.currentThread()注意，是start()启动还是run启动</p>
<p>生活一个开关我们打开了，自己有可能把它关掉在打开。同样，如果一个线程start()之后，我还可以拿着这个Thread 在开始一次吗</p>
<p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiCallStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TestTask(<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line">	t.start();</span><br><span class="line">	t.start(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试结构是不能再次调用start，直接报java.lang.IllegalThreadStateException</span><br></pre></td></tr></table></figure></p>
<p>跟进start() 方法源码就会发现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br></pre></td></tr></table></figure></p>
<p>start()之前会先判断线程状态,但是如果用 t.run() 是可以多次调用的。也算是start() 和 run()的区别吧 ，<strong>因为直接调用run()其实都没有新建线程</strong></p>
<p>说到线程状态，那么来看看线程的状态到底有哪些？</p>
<h2 id="1-2-线程状态"><a href="#1-2-线程状态" class="headerlink" title="1.2 线程状态"></a>1.2 线程状态</h2><h3 id="1-2-1-线程状态分析"><a href="#1-2-1-线程状态分析" class="headerlink" title="1.2.1 线程状态分析"></a>1.2.1 线程状态分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        NEW,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">         * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">         * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">         * such as processor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RUNNABLE,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">         * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">         * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">         * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        BLOCKED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">         * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">         * following methods:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">         * perform a particular action.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">         * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">         * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">         * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">         * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        WAITING,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">         * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">         * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">         * The thread has completed execution.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>NEW</strong> 创建完成，但是没有启动</li>
<li><strong>RUNABLE</strong> 运行状态。正在java虚拟中被执行，但是有可能正在等待系统资源，比如处理器资源</li>
<li><strong>BLOCKED</strong> 受阻塞，并在等待监视器锁。线程正在等待监视器锁，以便进入同步方法/块，或者这调用Object.wait()方法后再次进入同步方法/块</li>
<li><strong>WAITING</strong> 等待中，线程调用如下方法会进入等待状态<ol>
<li>Object.wait()并且没有超时时间</li>
<li>Thread.join() 并且没有超时时间</li>
<li>LockSupport.park()</li>
</ol>
</li>
</ol>
<p>例如：已经在某一对象上调用了 Object.wait() 的线程正等待另一个线程，以便在该对象上调用 Object.notify() 或 Object.notifyAll()。</p>
<ol>
<li><strong>TIMED_WAITING</strong> 指定等待时间的等待，调用如下方法会进入此状态<ol>
<li>Thread.sleep()</li>
<li>Object.wait() 指定超时时间</li>
<li>Thread.join() 执行超时时间</li>
<li>LockSupport.parkNanos</li>
<li>LockSupport.parkUntil</li>
</ol>
</li>
<li><strong>TERMINATED</strong> 线程结束，完成执行</li>
</ol>
<h3 id="1-2-2-线程状态转换图"><a href="#1-2-2-线程状态转换图" class="headerlink" title="1.2.2 线程状态转换图"></a>1.2.2 线程状态转换图</h3><p>线程状态之间的转换图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4752922-3119da8ae7ae0613.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线程状态转换图"></p>
<h2 id="1-3-关于守护线程-Daemon-Thread"><a href="#1-3-关于守护线程-Daemon-Thread" class="headerlink" title="1.3 关于守护线程 Daemon Thread"></a>1.3 关于守护线程 Daemon Thread</h2><p>java中的线程分为两类：<strong>用户线程(User Thread)、守护线程(Daemon Thread)</strong></p>
<p>守护线程就是程序运行的时候在后台提供一种通用的服务的线程。比如：垃圾回收线程。这种线程并不是程序中不可或缺的，因此，<strong>当所有的非守护线程结束时候，程序也会终止，同时会杀死进程中所有的守护线程</strong>。</p>
<p>用户线程和守护线程几乎没有什么区别，唯一的不同之处在于虚拟机的离开：如果所有的用户线程结束了，守护线程没有守护对象，程序还是会结束。</p>
<p>将线程转换成守护线程可以通过Thread对象的setDaemon(true)方法来实现。使用守护线程需要注意：</p>
<blockquote>
<ol>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。 </li>
<li>在Daemon线程中产生的新线程也是Daemon的</li>
<li>守护线程应该永远不去访问固有资源，如文件、数据库，因为它会在任何时候甚至在一个操作的中间发生中断(如：非守护线程都停止了)。</li>
</ol>
</blockquote>
<h2 id="1-4-Thread类常用方法"><a href="#1-4-Thread类常用方法" class="headerlink" title="1.4 Thread类常用方法"></a>1.4 Thread类常用方法</h2><h3 id="1-4-1-start"><a href="#1-4-1-start" class="headerlink" title="1.4.1 start()"></a>1.4.1 start()</h3><p>start作用就是启动一个线程，他和run()的区别在前面也有说过</p>
<p>需要注意的是，如果多个线程在程序代码中顺序的调用start方法，并能保证两个线程的启动顺序，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Thread</span><br><span class="line">    t1 = <span class="keyword">new</span> Thread(),</span><br><span class="line">    t1 = <span class="keyword">new</span> Thread(),</span><br><span class="line">    t1 = <span class="keyword">new</span> Thread();</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br></pre></td></tr></table></figure></p>
<p>实际的启动顺序是随机，和cpu的调度有关</p>
<h3 id="1-4-2-sleep"><a href="#1-4-2-sleep" class="headerlink" title="1.4.2 sleep()"></a>1.4.2 sleep()</h3><p>sleep(long mills) 是Thread 类的一个今天native的方法，调用sleep线程进入阻塞。参数为0则一直等待。</p>
<p>需要注意的是，<strong>如果线程中获得某个对象的内置锁，在sleep的时候是不会释放锁的，这点和后面要说的wait()不同，wait()是会释放锁的</strong></p>
<blockquote>
<p>Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.</p>
</blockquote>
<p>以上引用自sleep方法源码上面的解释，最后一句说明了，sleep不释放锁</p>
<h3 id="1-4-3-interrupt"><a href="#1-4-3-interrupt" class="headerlink" title="1.4.3 interrupt()"></a>1.4.3 interrupt()</h3><p>调用线程打断，如果线程正因为调用了wait() ,sleep(),join等方法阻塞的时候，就会抛出一个InterruptedException</p>
<h3 id="1-4-4-wait、notify-notifyAll"><a href="#1-4-4-wait、notify-notifyAll" class="headerlink" title="1.4.4 wait、notify()/notifyAll()"></a>1.4.4 wait、notify()/notifyAll()</h3><p>这三个方法都是Object类实例的方法，<strong>由于这三个方法在使用的时候都涉及到锁的操作(获取和释放)，因此，这三个方法必须要在同步代码块中执行</strong>，否则抛出IllegalMonitorStateException异常。</p>
<p>使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thread wait方法学习</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-03-21 14:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Integer o = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"thread one start..."</span>+System.currentTimeMillis());</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">3000</span>);<span class="comment">// 让t2先获得o的内置锁</span></span><br><span class="line">					<span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">						System.out.println(<span class="string">"notify thread two on object o before..."</span>+System.currentTimeMillis());</span><br><span class="line">						o.notify();</span><br><span class="line">						System.out.println(<span class="string">"notify thread two on object o end..."</span>+System.currentTimeMillis());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">"thread one end..."</span>+System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">					System.out.println(<span class="string">"thread two start..."</span>+System.currentTimeMillis());</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						o.wait(<span class="number">0</span>);</span><br><span class="line">						System.out.println(<span class="string">"awake...."</span>+System.currentTimeMillis());</span><br><span class="line">						Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">					System.out.println(<span class="string">"thread two end..."</span>+System.currentTimeMillis());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		t2.start();</span><br><span class="line">		t1.start();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">thread two start...1490176028853</span></span><br><span class="line"><span class="comment">thread one start...1490176028853</span></span><br><span class="line"><span class="comment">notify thread two on object o before...1490176031854</span></span><br><span class="line"><span class="comment">notify thread two on object o end...1490176031854</span></span><br><span class="line"><span class="comment">thread one end...1490176031854</span></span><br><span class="line"><span class="comment">awake....1490176031854</span></span><br><span class="line"><span class="comment">thread two end...1490176032854</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到，t1 和 t2 都是对Object o 加锁，但是在t2里面o.wait之后，t1就能拿到锁了（awake…. 比 notify xxxx 后打印，t2的同步块没有执行完，锁就释放了），所以可以看出，wait是会释放锁的。</p>
<p>同时程序中为了使t2先拿到锁o从而先wait住，然后让t1 中释放锁o,故意在t1进来后先sleep了。那实际开发中肯定不能这样，实际应该怎样做呢 ？</p>
<p>在多线环境先一般建议在循环中使用wait,使用循环的条件做判断，例如在join的源码中有一段，如果join的是时间传的是0的情况的处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                wait(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>这样在线程顺序未知的情况下，依然可以让wait生效</p>
<p>所有借鉴这个，实际生产中，我们控制好循环条件，就可以正确的使用wait了。</p>
<p>总的来说就是： <strong>wait方法会释放锁，当前的线程(上例中的t2)被挂起,且wait方法要在循环中使用，控制好条件来跳出循环</strong>，notify/notifyAll 配饰wait使用</p>
<p>结合上面的例子就是，t2中调用o.wait的时候，t2线程被挂起，不在执行，需要等待唤醒。o.wait() 释放掉t2对o的锁，使t1能够获得o的锁，执行o.notify唤醒t2,然后t2继续执行完成。</p>
<h3 id="1-4-5-yield"><a href="#1-4-5-yield" class="headerlink" title="1.4.5 yield()"></a>1.4.5 yield()</h3><p>简单讲就是告诉cpu我可以让出资源，注意是可以，也就是说，具体会不会让出，看cpu的调度了。此方法一般少用</p>
<h3 id="1-4-6-join"><a href="#1-4-6-join" class="headerlink" title="1.4.6 join()"></a>1.4.6 join()</h3><p>join方法的实质是wait, 理解join单词的字面意思，也许会更好理解join做的事情。join就是加入，如果线程A里面执行了线程b.join() 就是A线程进入等待，等b线程执行完。再接着执行。 换个角度就像是A在完成一件事的时候，把另外一件事B加进来，所以join就很形象。</p>
<p>示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * join方法测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-03-21 9:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">			</span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"First task started"</span>);</span><br><span class="line">				System.out.println(<span class="string">"Sleeping for 2 seconds"</span>);</span><br><span class="line">				<span class="keyword">try</span></span><br><span class="line">				&#123;</span><br><span class="line">					Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">				&#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">"First task completed"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">			</span>&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					t1.join();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">"Second task completed"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ouput</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">First task started</span></span><br><span class="line"><span class="comment">Sleeping for 2 seconds</span></span><br><span class="line"><span class="comment">First task completed</span></span><br><span class="line"><span class="comment">Second task completed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<p>从结果可以很清楚的看到，t2是在等t1执行完在执行的，哪怕t1中有sleep</p>
<p><strong>关于join的执行过程，他本质上是执行wait,那又是在哪notify的呢 ？调用join的过程是怎样的呢 ？</strong></p>
<p>先看源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    join(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先这个方法是一个Thread的实例的方法，并且注意是个同步的方法（很好理解，前面说的wait方法会操作锁嘛）</p>
<p>就那示例程序分析吧，t1.join() 最后调用到了join(0) ，那么就会进入如下代码块</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码，isAlive是谁在调用，wait(0) 是谁在调用？肯定是调用join的实例也就是t1，那么也就是说这段的逻辑就是如果t1还存活，就一直调用t1.wait() ,而整个代码(t1.join)是在t2里面调用的。</p>
<p>那么，整个意思就是 t2中调用t1.join实际就是判断如果t1.isAlive == true 就调用t1.wait() ，t2 需要获取一个t1内置锁。直到某个地方调用t1.notify 释放t1的内置锁，t2才继续执行。</p>
<p>以上就是join的过程，那么，t1内置锁什么时候释放的呢 ？谁通知的t2(即执行t1.notify)的呢？刚才源码分析没见哪里notify,示例运行t2确实执行了啊，没有一直等待锁啊？</p>
<p>这个之前也困扰我很久，后来在知乎上看到了答案 <a href="https://www.zhihu.com/question/44621343" target="_blank" rel="noopener">https://www.zhihu.com/question/44621343</a> 回答者cao解释了。</p>
<p>在线程退出的jvm源码中有如下一段：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">作者：cao</span><br><span class="line">链接：https:<span class="comment">//www.zhihu.com/question/44621343/answer/97640972</span></span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个c++函数：</span></span><br><span class="line"><span class="keyword">void</span> JavaThread::<span class="built_in">exit</span>(<span class="keyword">bool</span> destroy_vm, ExitType exit_type) ；</span><br><span class="line"></span><br><span class="line"><span class="comment">//这家伙是啥，就是一个线程执行完毕之后，jvm会做的事，做清理啊收尾工作，</span></span><br><span class="line"><span class="comment">//里面有一个贼不起眼的一行代码，眼神不好还看不到的呢，就是这个：</span></span><br><span class="line"></span><br><span class="line">ensure_join(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻译成中文叫 确保_join(这个)；代码如下：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ensure_join</span><span class="params">(JavaThread* thread)</span> </span>&#123;</span><br><span class="line">  Handle threadObj(thread, thread-&gt;threadObj());</span><br><span class="line"></span><br><span class="line">  <span class="function">ObjectLocker <span class="title">lock</span><span class="params">(threadObj, thread)</span></span>;</span><br><span class="line"></span><br><span class="line">  thread-&gt;clear_pending_exception();</span><br><span class="line"></span><br><span class="line">  java_lang_Thread::set_thread_status(threadObj(), java_lang_Thread::TERMINATED);</span><br><span class="line"></span><br><span class="line">  java_lang_Thread::set_thread(threadObj(), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//同志们看到了没，别的不用看，就看这一句，妈了个淡淡，</span></span><br><span class="line"><span class="comment">//thread就是当前线程，是啥是啥？就是刚才说的b线程啊。</span></span><br><span class="line">  lock.notify_all(thread);</span><br><span class="line"></span><br><span class="line">  thread-&gt;clear_pending_exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样整个过程就清晰了。t1执行完了之后，对t1内置锁执行了notifyAll(),所有t2被唤醒，执行完成。</p>
<h2 id="1-5-wait-notify-notifyAll-和-循环检测等待的区别"><a href="#1-5-wait-notify-notifyAll-和-循环检测等待的区别" class="headerlink" title="1.5 wait-notify/notifyAll 和 循环检测等待的区别"></a>1.5 wait-notify/notifyAll 和 循环检测等待的区别</h2><p>之前有说过，wait和notify可以类似个等待通知，其实不用wait-notify模式也是可以做的，例如现有如下场景：</p>
<p>A让B帮自己去买包烟回来，A等到B把烟买回交给自己的时候，A才给B钱</p>
<p><strong>wait-notify的模式</strong></p>
<p>A中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!isGetCigarette) &#123; <span class="comment">//没有得到烟</span></span><br><span class="line">    cigarette.wait(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">giveMoneyToB();</span><br></pre></td></tr></table></figure></p>
<p>B中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果自己买到烟,就通知A </span></span><br><span class="line">cigarette.notify()</span><br></pre></td></tr></table></figure></p>
<p><strong>不用wait-notify</strong></p>
<p>A中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!isGetCigarette) &#123; <span class="comment">//没有得到烟</span></span><br><span class="line">    <span class="comment">// doNothing</span></span><br><span class="line">&#125;</span><br><span class="line">giveMoneyToB();</span><br></pre></td></tr></table></figure></p>
<p>B中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 如果自己买到烟就设置标识为true</span></span><br><span class="line">isGetCigarette = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>
<p>两种都要求isGetCigarette是一个共享的变量。</p>
<p>那么这两种有什么区别呢 ？ 如果没有区别，是不是wait-notify岂不是没有存在意义 ？</p>
<p>原因就在于：处于wait()中的线程是中断的，被挂起的，不会抢占cpu的计算时间；而相反的，无线循环保证了线程的就绪态，会占用cpu时间。占用cpu即会减少其他线程的计算资源，导致性能下降</p>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java线程、线程池、并发包(1)]]></title>
      <url>/2018/01/10/thread-01/</url>
      <content type="html"><![CDATA[<h2 id="1-线程的一些基本概念"><a href="#1-线程的一些基本概念" class="headerlink" title="1 线程的一些基本概念"></a>1 线程的一些基本概念</h2><blockquote>
<p>编写线程安全的代码，其核心在于要对状态访问进行管理，特别是对共享（Shared）和可变（Mutable）状态的访问</p>
</blockquote>
<p>（引自：《Java并发编程实战》）</p>
<blockquote>
<p>从非正式的意义上来说，对象的状态是指存储在状态变量（例如示例或静态域）中的数据</p>
</blockquote>
<p>（引自：《Java并发编程实战》）</p>
<h3 id="1-1-共享-Shared-与可变-Mutable"><a href="#1-1-共享-Shared-与可变-Mutable" class="headerlink" title="1.1 共享(Shared)与可变(Mutable)"></a>1.1 共享(Shared)与可变(Mutable)</h3><blockquote>
<p>“共享” 意味着变量可以由多个线程同时访问，二“可变”则意味着变量的值在其生命周期内可以发现变化</p>
</blockquote>
<p>（引自：《Java并发编程实战》）</p>
<p>这些可变的变量在被多个线程访问的时候，如何防止这些改变不受控制,解决方法如下：</p>
<blockquote>
<p>1、不在线程中共享该状态变量，可以将变量封装到方法中。</p>
<p>2、将状态变量修改为不可变的变量（final）。</p>
<p>3、访问状态变量时使用同步策略。</p>
<p>4、使用原子变量类。</p>
</blockquote>
<h3 id="1-2-线程安全性"><a href="#1-2-线程安全性" class="headerlink" title="1.2 线程安全性"></a>1.2 线程安全性</h3><blockquote>
<p>线程安全是一个比较复杂的概念。其核心概念就是正确性。所谓正确性就是某各类的行为与其规范完全一致，即其近似与“所见即所知（we know it when we see it）”。当多个线程访问某各类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或者协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。</p>
</blockquote>
<p>（引自：《Java并发编程实战》）</p>
<h3 id="1-3-原子性、可见性、有序性"><a href="#1-3-原子性、可见性、有序性" class="headerlink" title="1.3 原子性、可见性、有序性"></a>1.3 原子性、可见性、有序性</h3><p><strong>原子性</strong>：一个操作如果是不可分割的，那么这个操作可以被认为是具有原子性的</p>
<p><strong>可见性</strong>：<br>线程可见性是指线程之间的可见性，即一个变量的修改对另外一个线程是可见的，这个变量的修改结果，另外一个线程可以立马知道。</p>
<p><strong>有序性</strong>：<br>有序性指的是数据不相关的变量在并发的情况下，实际执行的结果和单线程的执行结果是一样的，不会因为重排序的问题导致结果不可预知。volatile, final, synchronized，显式锁都可以保证有序性。</p>
<h2 id="2-关于锁"><a href="#2-关于锁" class="headerlink" title="2 关于锁"></a>2 关于锁</h2><h3 id="2-1-synchronized-内置锁"><a href="#2-1-synchronized-内置锁" class="headerlink" title="2.1 synchronized (内置锁)"></a>2.1 synchronized (内置锁)</h3><p>java内置的锁机制synchronized 可以用来保证原子性</p>
<p>同步代码块包括两个部分：一个作为锁的对象引用，一个作为由这个锁保护的代码块。<strong>以synchronized关键字来修饰的方法就是一种横跨整个方法体的同步代码块，其中该同步代码块的锁就是方法调用所在的对象</strong>。静态的synchronized方法已Class对象作为锁</p>
<p><strong>每个java对象都可以用作一个实现同步的锁，这些锁被称为 内置锁(Intrinsic Lock)或者监视器锁(Monitor Lock)。</strong> 也就是说内置锁是在java对象上面的，普通代码块还在synchronized(内置锁对象) 。同步方法就是在方法调用对象上加锁的 。</p>
<p><strong>获取【内置锁】的唯一方式就是进入同步锁的代码块或者方法</strong></p>
<p>java的内置锁是一种互斥锁，这就意味着最多只能有一个线程能持有这种锁。当线程A尝试说去线程B持有的锁的时候，线程A必须等待或者阻塞，直到线程B释放这个锁，否则A就一直等待下去。</p>
<p>例如上面的特性，可以实现一个死锁的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		DeadLockDemo d = <span class="keyword">new</span> DeadLockDemo();</span><br><span class="line"></span><br><span class="line">		Thread a = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"thread a running..."</span>);</span><br><span class="line">				<span class="keyword">synchronized</span> (d) &#123; <span class="comment">// 获得对象d的锁</span></span><br><span class="line">					System.out.println(<span class="string">"thread a get the lock..."</span>);</span><br><span class="line">					<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">						<span class="comment">// 只是简单的死循环，占用对象d的锁不释放</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		Thread b = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"thread b running..."</span>);</span><br><span class="line">				<span class="keyword">synchronized</span> (d) &#123; <span class="comment">// 获得对象d的锁</span></span><br><span class="line">					System.out.println(<span class="string">"thread b get the lock..."</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		a.start();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">3000</span>); <span class="comment">// 确保a先启动，直接顺序start不能保证a比b先启动</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		b.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">thread a running...</span></span><br><span class="line"><span class="comment">thread a get the lock...</span></span><br><span class="line"><span class="comment">thread b running...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<p>上面的例子，线程b一直都没有获得锁，一直等待a释放锁，从而导致死锁</p>
<h3 id="2-2-内置锁的重入"><a href="#2-2-内置锁的重入" class="headerlink" title="2.2 内置锁的重入"></a>2.2 内置锁的重入</h3><p>内置锁是可以重入的，也就是说某个线程试图获取他自己持有的锁的时候，这个请求会成功。</p>
<blockquote>
<p>“重入”意味着获取锁的操作粒度是“线程”，而不是“调用”</p>
</blockquote>
<p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试锁的重入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-03-22 12:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockOverride</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"super do something...."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"sub do something and call super.doSomething()...."</span>);</span><br><span class="line">			<span class="keyword">super</span>.doSomething();</span><br><span class="line">			System.out.println(<span class="keyword">this</span>);</span><br><span class="line">			System.out.println(<span class="keyword">super</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SubClass sub = <span class="keyword">new</span> SubClass();</span><br><span class="line">		sub.doSomething();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sub do something and call super.doSomething()....</span></span><br><span class="line"><span class="comment">super do something....</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到，正常打印了结果，分析一下这个代码，在sub.doSomething的是时候和super.doSomething 的时候都需要获得SuperClass的锁，如果锁不能重入的话，就会一直等待，出现死锁。</p>
<p>这个是《java并发编程实践》中对所重入的例子，网上也很多地方都是这个例子，但是我不太理解，子类在调用doSomething的时候，获取应该是子类实例对象的锁才对啊，当运行到super.doSomething的时候，获取父类的内置锁，不冲突啊 ？ 一直很不解</p>
<p>所有我自己根据锁的理解和重入理解，写了个简单点的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试锁的重入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yehuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-03-22 12:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockOverride</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		LockOverride lo = <span class="keyword">new</span> LockOverride();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">synchronized</span> (lo) &#123; <span class="comment">// 1</span></span><br><span class="line">			System.out.println(<span class="string">"outter get lock on lo...."</span>);</span><br><span class="line">			<span class="keyword">synchronized</span> (lo) &#123; <span class="comment">// 2</span></span><br><span class="line">				System.out.println(<span class="string">"inner get lock on lo"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">outter get lock on lo....</span></span><br><span class="line"><span class="comment">inner get lock on lo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<p>结果很明显，两次(注释1，2)同步块入口，获取锁成功了。但是1和2获取同一个锁，没等1释放，2就获得了。应为锁重入，2的时候已经有获得lo的内置锁了。</p>
<p>但是，如果上面代码变成如下方式，即2出变成一个新的线程呢：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockOverride</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		LockOverride lo = <span class="keyword">new</span> LockOverride();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">synchronized</span> (lo) &#123; <span class="comment">// 1</span></span><br><span class="line">			System.out.println(<span class="string">"outter get lock on lo...."</span>+System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					<span class="keyword">synchronized</span> (lo) &#123; <span class="comment">// 2</span></span><br><span class="line">						System.out.println(<span class="string">"inner get lock on lo..."</span>+System.currentTimeMillis());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;).start();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">outter get lock on lo....<span class="number">1490166261911</span></span><br><span class="line">inner get lock on lo...<span class="number">1490166266912</span></span><br></pre></td></tr></table></figure></p>
<p>这是时候获取锁的1,2两处实际上是两个线程，所有2等到1释放才执行了里面的代码。这也解释了上面说的锁的获取操作粒度是线程而不是调用。对比也解释了前面的例子能获得锁是因为同一个线程+锁的重入</p>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用 Hexo 和 GitHub Page搭建个人博客]]></title>
      <url>/2018/01/03/hello-world/</url>
      <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java不得不提的内存模型]]></title>
      <url>/2017/04/01/jvm/</url>
      <content type="html"><![CDATA[<h2 id="1-认识JVM"><a href="#1-认识JVM" class="headerlink" title="1 认识JVM"></a>1 认识JVM</h2><p><img src="http://img.blog.csdn.net/20131231175136859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2luZ29md29ybGQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="JVM内存模型图"></p>
<h3 id="1-1-程序计数器（program-count-register）"><a href="#1-1-程序计数器（program-count-register）" class="headerlink" title="1.1 程序计数器（program count register）"></a>1.1 程序计数器（program count register）</h3><p><strong>当前线程</strong>执行的字节码的行号指示器。多线程时，当线程数超过CPU数量或CPU内核数量，线程之间就要根据时间片轮询抢夺CPU时间资源，因此每个线程有要有一个独立的程序计数器，记录下一条要运行的指令</p>
<p>程序计数器内存区域又称“线程私有”内存。</p>
<p>线程执行java方法，program count register 记录正在执行的虚拟机字节码指令的地址。程序执行Native方法，program count register 的值为空（Undefined），program count register是<strong>唯一一个</strong>在java虚拟机规范中没有定义<strong>OutOfMemoryError</strong>情况的区域</p>
<h3 id="1-2-虚拟机栈（VM-stack）"><a href="#1-2-虚拟机栈（VM-stack）" class="headerlink" title="1.2 虚拟机栈（VM stack）"></a>1.2 虚拟机栈（VM stack）</h3><p>线程私有的，与线程在同一时间创建。生命周期与线程相同</p>
<p>管理JAVA方法执行的内存模型。每个方法执行时都会创建一个桢栈来<strong>存储方法的的变量表、操作数栈、动态链接方法、返回值、返回地址等信息</strong>。</p>
<p>栈的大小决定了方法调用的可达深度（递归多少层次，或嵌套调用多少层其他方法，-Xss参数可以设置虚拟机栈大小）。栈的大小可以是固定的，或者是动态扩展的。如果请求的栈深度大于最大可用深度，则抛出stackOverflowError；如果栈是可动态扩展的，但没有内存空间支持扩展，则抛出OutofMemoryError。</p>
<p>使用jclasslib工具可以查看class类文件的结构。</p>
<p>常说的栈内存、堆内存中的栈内存就是说的这个区域</p>
<p>下图为栈帧结构图：<br><img src="http://img.blog.csdn.net/20140101100938109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2luZ29md29ybGQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h3 id="1-3-本地方法栈（Native-method-stack）"><a href="#1-3-本地方法栈（Native-method-stack）" class="headerlink" title="1.3 本地方法栈（Native method stack）"></a>1.3 本地方法栈（Native method stack）</h3><p>和虚拟机栈功能相似，但管理的不是JAVA方法，是本地方法，本地方法是用C实现的。</p>
<h3 id="1-4-java堆-JAVA-Heap"><a href="#1-4-java堆-JAVA-Heap" class="headerlink" title="1.4 java堆 (JAVA Heap)"></a>1.4 java堆 (JAVA Heap)</h3><p><img src="http://img.blog.csdn.net/20140101101922203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2luZ29md29ybGQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>线程共享的，存放所有<strong>对象实例</strong>和<strong>数组</strong>。<strong>垃圾回收的主要区域</strong>。可以分为新生代和老年代(tenured)。</p>
<p>新生代用于存放刚创建的对象以及年轻的对象，如果对象一直没有被回收，生存得足够长，老年对象就会被移入老年代。</p>
<p>新生代又可进一步细分为eden、survivorSpace0(s0,from survivor)、survivorSpace1(s1,to survivor)。刚创建的对象都放入eden,s0和s1都至少经过一次GC并幸存。如果幸存对象经过一定时间仍存在，则进入老年代(tenured)。</p>
<p>物理上不要求连续，逻辑上连续即可。当堆中没有内存分配的时候，并且主机没有空间给堆来扩展的时候，出现 OutOfMemoryError</p>
<h3 id="1-5-方法区-Method-Area"><a href="#1-5-方法区-Method-Area" class="headerlink" title="1.5 方法区 (Method Area)"></a>1.5 方法区 (Method Area)</h3><p>线程共享的，<strong>用于存放被虚拟机加载的类的元数据信息：如常量、静态变量、即时编译器编译后的代码</strong>。也成为永久代。如果hotspot虚拟机确定一个类的定义信息不会被使用，也会将其回收。回收的基本条件至少有：所有该类的实例被回收，而且装载该类的ClassLoader被回收</p>
<h4 id="1-5-1-运行时常量池"><a href="#1-5-1-运行时常量池" class="headerlink" title="1.5.1 运行时常量池"></a>1.5.1 运行时常量池</h4><p>运行时常量池是方法去的一部分，Class文件中除了有类型版本、字段、方法、接口等信息外，还有常量池（Constant Pool table）信息，用于存放<strong>编译期生成的各种字面量和符号引用</strong>。</p>
<h2 id="2-垃圾回收算法"><a href="#2-垃圾回收算法" class="headerlink" title="2. 垃圾回收算法"></a>2. 垃圾回收算法</h2><h3 id="2-1-判断对象是不是“死亡”"><a href="#2-1-判断对象是不是“死亡”" class="headerlink" title="2.1 判断对象是不是“死亡”"></a>2.1 判断对象是不是“死亡”</h3><ol>
<li><p>引用计数算法</p>
<ol>
<li>对象有一个引用计数器，有引用+1，引用失效-1</li>
<li>缺点，不能解决相互引用的问题</li>
</ol>
</li>
<li><p>可达性分析算法</p>
<ol>
<li>GC Roots作为起点向下搜索，走过的路径为引用链。 当一个对象没有引用链到GC Roots时候就被判定为<strong>可回收对象</strong></li>
<li>GC Roots 对象包括：<ol>
<li>VM Stack（本地变量表）中引用的对象</li>
<li>Method Area中<strong>类静态属性引用的对象</strong></li>
<li>Method Area中<strong>常量引用的对象</strong></li>
<li>Native Method Stack中JNI引用的对象</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="2-2-垃圾收集算法"><a href="#2-2-垃圾收集算法" class="headerlink" title="2.2 垃圾收集算法"></a>2.2 垃圾收集算法</h3><h4 id="2-2-1-标记-清除算法（Mark-Sweep）"><a href="#2-2-1-标记-清除算法（Mark-Sweep）" class="headerlink" title="2.2.1 标记-清除算法（Mark-Sweep）"></a>2.2.1 标记-清除算法（Mark-Sweep）</h4><p>【实现】：分为标记和清除两个步骤，标记算法即 引用计数算法 和 可达性分析算法</p>
<p>【优缺点】： </p>
<ol>
<li>效率不高，标记和清除效率不高。</li>
<li>空间问题，清除算法过后，产生大量不连续的空间，碎片太多导致大对象进来的时候没有合适地方，导致提前再触发一次GC</li>
</ol>
<h4 id="2-2-2-复制算法-Copying"><a href="#2-2-2-复制算法-Copying" class="headerlink" title="2.2.2 复制算法(Copying)"></a>2.2.2 复制算法(Copying)</h4><p><img src="http://7xsv3u.com1.z0.glb.clouddn.com/gc-copy.png" alt="gc-copying"></p>
<p>【实现】：把内存容量分为两半，每次在一块上面操作，当一块用完，把所有存活的对象顺序复制到另外一块上，当前这一块全部清除。如此重复，新的一块上面也是连续的。</p>
<p>【优缺点】：</p>
<ol>
<li>优点：效率高，实现简单，每次移动堆定指针即可，整块清除，不用处理内存碎片</li>
<li>缺点：空间问题，把原本的可用空间缩小了一半</li>
</ol>
<p>【改进版】：大部分情况下，新生代对象98%都是“朝生夕死”的 ，所以内存比例划分不用1:1，<br>而是一个大的Eden 和两个小的 Survivor, 每次只使用Eden 和 一个 Survivor。回收时，把Eden和Survivor的存活对象复制到另外的Survivor,如果存活对象比较多，就放到老年代。</p>
<p>HotSpot默认Eden:Survivor=8:1</p>
<p><strong>此算法针对新生代</strong></p>
<p><img src="http://img.blog.csdn.net/20140101113433906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2luZ29md29ybGQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="改进版复制算法"></p>
<h4 id="2-2-3-标识-整理算法（Mark-compact）"><a href="#2-2-3-标识-整理算法（Mark-compact）" class="headerlink" title="2.2.3 标识-整理算法（Mark-compact）"></a>2.2.3 标识-整理算法（Mark-compact）</h4><p>【实现】：分标记和整理两步，标记: 引用计数算法 和 可达性分析法 ，整理:把存活对象向一段移动，再清除另一端的对象。</p>
<p>【优缺点】：</p>
<ol>
<li>改进了标记清除算法的空间不连续问题</li>
<li>确定同标记清除一样，移动需要操作，效率问题</li>
</ol>
<h4 id="2-2-4-分代收集算法（Generational-Collection）"><a href="#2-2-4-分代收集算法（Generational-Collection）" class="headerlink" title="2.2.4 分代收集算法（Generational Collection）"></a>2.2.4 分代收集算法（Generational Collection）</h4><p>【实现】：根据对象存活周期不同，划分成新生代和老年代。在根据特点采用算法<br>新生代使用复制算法，老年代中存活率高，没有额外控制，则使用“标记-清除”或者“标记-整理”</p>
<p>【优缺点】：</p>
<ol>
<li>根据对象存活周期，灵活使用算法</li>
</ol>
<h4 id="2-2-5-理解GC日志"><a href="#2-2-5-理解GC日志" class="headerlink" title="2.2.5 理解GC日志"></a>2.2.5 理解GC日志</h4><p>虚拟机配置参数：-XX:+PrintGCDateStamps -XX:+PrintGCDetails 可以查看gc的日志，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-02-16T14:44:55.161+0800: [GC (System.gc()) [PSYoungGen: 6512K-&gt;680K(34816K)] 6512K-&gt;688K(114176K), 0.0031955 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2017-02-16T14:44:55.165+0800: [Full GC (System.gc()) [PSYoungGen: 680K-&gt;0K(34816K)] [ParOldGen: 8K-&gt;615K(79360K)] 688K-&gt;615K(114176K), [Metaspace: 3167K-&gt;3167K(1056768K)], 0.0133387 secs] [Times: user=0.03 sys=0.00, real=0.01 secs]</span><br></pre></td></tr></table></figure></p>
<p>GC日志开头的“[GC” 和 “[Full GC” 表示垃圾收集的停顿类型，Full GC 表示发生了Stop The World</p>
<p>PSYoungGen、ParOldGen、Metaspace 表示GC发现的区域，具体名字跟收集器相关，方括号内部<br>“680K-&gt;0K(34816K)” 表示 “GC前该区域的内存已使用量-&gt;GC后该区域的内存已使用量(改内存区域总量)”</p>
<p>方括号外的“688K-&gt;615K(114176K)” 表示“GC前java堆已使用的容量-&gt;GC后java堆的已使用容量(java堆的总容量)”</p>
<p><strong>在 HandlePromotionFailure设置是否允许担保失败，开启开关后，比较的是历次晋升到老年代对象的平均值</strong></p>
<p><strong>如果HandlePromotionFailure失败，会触发一次Full GC。打开HandlerPromotionFailure设置，可避免Full GC过于频繁</strong></p>
<h2 id="3-OutOfMemoryError实战"><a href="#3-OutOfMemoryError实战" class="headerlink" title="3. OutOfMemoryError实战"></a>3. OutOfMemoryError实战</h2><h3 id="3-1-java-heap-溢出"><a href="#3-1-java-heap-溢出" class="headerlink" title="3.1 java heap 溢出"></a>3.1 java heap 溢出</h3><p>【要点】：</p>
<ol>
<li>-Xms  -Xmx 设置堆的大小</li>
<li>-XX:+HeapDumpOnOutOfMemoryError 是vm dump出日志，可供分析</li>
</ol>
<p>【应对】：</p>
<ol>
<li>分时dump日志，看看是内存泄露（回收不了）还是内存溢出（内存不够）</li>
<li>如果是内存泄露，通过工作找到泄露对象通过什么引用链关联导致不能回收，处理代码</li>
<li>如果是内存不够，结合物理机内存，适当调整-Xms -Xmx的大小</li>
<li>优化代码，减少生命周期长，持有状态时间长的代码</li>
</ol>
<h3 id="3-2-VM-stack和-Native-method-stack-溢出"><a href="#3-2-VM-stack和-Native-method-stack-溢出" class="headerlink" title="3.2 VM stack和 Native method stack 溢出"></a>3.2 VM stack和 Native method stack 溢出</h3><p>【要点】：</p>
<ol>
<li>使用-Xss 设置栈的容量</li>
<li>线程请求栈的深度大于虚拟机允许的深度，抛出StackOverflowError</li>
<li>虚拟机栈扩展的时候不能获得足够空间，抛出OutOfMemoryError</li>
</ol>
<p>【应对】：</p>
<ol>
<li>在单线程的情况下基本很难出现OutOfMemoryError，基本都只能达到StackOverflowError。多线程的时候可以出现OutOfMemoryError，单个栈的空间大了，多线程的时候，线程使用的空间多了，占用的内存就多了，就会OutOfMemoryError。因此如果是多线程导致OutOfMemoryError可以尝试适当减小栈内存来尝试解决</li>
</ol>
<h3 id="3-3-method-area-和-constant-pool-table-溢出"><a href="#3-3-method-area-和-constant-pool-table-溢出" class="headerlink" title="3.3 method area 和 constant pool table 溢出"></a>3.3 method area 和 constant pool table 溢出</h3><p>【要点】：<br>方法区存放的是 Class相关信息，类名，访问修饰符，常量池，字段描述，方法描述等。 在运行时动态产生大量对象有可能造成OOM</p>
<p>【应对】：<br>使用CGlib ，大量JSP 后者动态JSP文件的应用，基于OSGi的应用等都是可能出现OOM,代码需要注意</p>
<h3 id="3-4-本机直接内存溢出-DirectMemory"><a href="#3-4-本机直接内存溢出-DirectMemory" class="headerlink" title="3.4 本机直接内存溢出(DirectMemory)"></a>3.4 本机直接内存溢出(DirectMemory)</h3><p>【要点】：通过 -XX:MaxDirectMemorySize 设置。由于DirectMemory 导致的内存溢出，一个明显的特点就是dump文件中看不出来明显异常。</p>
<p>【应对】：<br>如果发现OOM之后dump文件很小，程序中如果直接或者间接使用了NIO,则可能是NIO这方面的使用有问题</p>
<h2 id="4-JVM参数："><a href="#4-JVM参数：" class="headerlink" title="4. JVM参数："></a>4. JVM参数：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCDetails  打印垃圾回收信息</span><br><span class="line"></span><br><span class="line">-Xms 为Heap区域的初始值，线上环境需要与-Xmx设置为一致，否则capacity的值会来回飘动</span><br><span class="line">-Xmx 为Heap区域的最大值</span><br><span class="line">-Xss（或-ss） 线程栈大小（指一个线程的native空间）1.5以后是1M的默认大小</span><br><span class="line">-XX:PermSize与-XX:MaxPermSize  方法区（永久代）的初始大小和最大值（但不是本地方法区）</span><br><span class="line">-XX:NewRatio  老年代与新生代比率</span><br><span class="line">-XX:SurvivorRatio  Eden与Survivor的占用比例。例如8表示，一个survivor区占用 1/8 的Eden内存，即1/10的新生代内存，为什么不是1/9？因为我们的新生代有2个survivor，即S1和S2。所以survivor总共是占用新生代内存的 2/10，Eden与新生代的占比则为 8/10。</span><br><span class="line">-XX:MaxHeapFreeRatio  GC后，如果发现空闲堆内存占到整个预估的比例小于这个值，则减小堆空间。</span><br><span class="line">-XX:MinHeapFreeRatio  GC后，如果发现空闲堆内存占到整个预估的比例大于这个值，则增大堆空间。</span><br><span class="line">-XX:NewSize    新生代大小</span><br></pre></td></tr></table></figure>
<h2 id="5-内存分配"><a href="#5-内存分配" class="headerlink" title="5. 内存分配"></a>5. 内存分配</h2><p><strong>内存分配算法：</strong> </p>
<ol>
<li>指针碰撞(Bump the pointer)（空闲区和不可用区有一个指针分开，内存是规整的）</li>
<li>空闲列表(Free List)（虚拟机维护一个空闲列表，每次从列表中找出一个足够的空间，并更新列表）</li>
</ol>
<p><strong>对象访问定位：</strong><br>目前主流访问方式有 使用句柄访问 和 直接指针</p>
<p>1 使用句柄访问<br><img src="http://7xsv3u.com1.z0.glb.clouddn.com/20170214164305.png" alt="image"></p>
<p>2 直接指针<br><img src="http://7xsv3u.com1.z0.glb.clouddn.com/20170214164334.png" alt="image"></p>
<p>两张访问方式各有优劣</p>
<p>句柄访问访问最大好处就是稳定的句柄，GC收集的时候只会改变句柄中的实例指针，而reference本身不变</p>
<p>直接方式就是直接访问，速度快</p>
<hr>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析Java序列化问题]]></title>
      <url>/2017/03/29/serializable/</url>
      <content type="html"><![CDATA[<h2 id="1-为什么要序列化"><a href="#1-为什么要序列化" class="headerlink" title="1. 为什么要序列化"></a>1. 为什么要序列化</h2><p>java序列化的目的就是把一个对象转换成流，并通过网络发送，或将其存入文件或者数据库以便未来使用。反序列则是把流转化成实际程序中使用的java。</p>
<p>Java的”对象序列化”能让你将一个实现了Serializable接口的对象转换成一组byte，这样日后要用这个对象时候，你就能把这些byte数据恢复出来，并据此重新构建那个对象了。这一点甚至在跨网络的环境下也是如此，这就意味着序列化机制能自动补偿操作系统方面的差异。也就是说，你可以在Windows机器上创键一个对象，序列化之后，再通过网络传到Unix机器上，然后在那里进行重建。你不用担心在不同的平台上数据是怎样表示的，byte顺序怎样，或者别的什么细节。之所以需要对象序列化，是因为有时候对象需要在网络上传输，传输的时候需要这种序列化处理，从服务器硬盘上把序列化的对象取出，然后通过网络传到客户端，再由客户端把序列化的对象读入内存，执行相应的处理。</p>
<h2 id="2-序列化实现及原理"><a href="#2-序列化实现及原理" class="headerlink" title="2. 序列化实现及原理"></a>2. 序列化实现及原理</h2><p>在java jdk1.1中就引入了序列化api。如果你希望一个类对象是可序列化的，你所要做的是实现java.io.Serializable接口。序列化一种标记接口，不需要实现任何字段和方法，这就像是一种选择性加入的处理，通过它可以使类对象成为可序列化的对象。</p>
<p>序列化处理是通过ObjectInputStream和ObjectOutputStream实现的，因此我们所要做的是基于它们进行一层封装，要么将其保存为文件，要么将其通过网络发送</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> z = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line">        System.out.printf(<span class="string">"w: %d%n"</span>, Foo.w);</span><br><span class="line">        System.out.printf(<span class="string">"x: %d%n"</span>, Foo.x);</span><br><span class="line">        System.out.printf(<span class="string">"y: %d%n"</span>, foo.y);</span><br><span class="line">        System.out.printf(<span class="string">"z: %d%n"</span>, foo.z);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"x.ser"</span>);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            oos.writeObject(foo);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Foo fooNew = <span class="keyword">null</span>;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"x.ser"</span>);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            System.out.println();</span><br><span class="line">            fooNew = (Foo) ois.readObject();</span><br><span class="line">            <span class="comment">// 上面代码执行完后，可以看到fooNew的属性中只有y=3,z=0 ,页验证了static 和 transient 不被序列化。</span></span><br><span class="line">            <span class="comment">// 查看源码writeObject上面的注释也写明了</span></span><br><span class="line">            System.out.printf(<span class="string">"w: %d%n"</span>, fooNew.w);</span><br><span class="line">            System.out.printf(<span class="string">"x: %d%n"</span>, fooNew.x);</span><br><span class="line">            System.out.printf(<span class="string">"y: %d%n"</span>, fooNew.y);</span><br><span class="line">            System.out.printf(<span class="string">"z: %d%n"</span>, fooNew.z);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的示例是一个使用序列化的例子。从上面的例子可以看出:</p>
<p><strong>如果想避免属性被序列化的话，将属性申明为<code>static</code> 或 <code>transient</code>就可以了。</strong></p>
<p>为什么呢？查看源码<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>就会发现，序列化实现就是依靠这两个类来做的。</p>
<p>查看<code>ObjectOutputStream</code>的 <code>writeObject</code> 方法，上面明显的注释说明，一个类的non-static属性和non-transient属性会被序列化。</p>
<p>序列化的过程 <code>ObjectOutputStream.writeObject--&gt;writeObject0--&gt;writeOrdinaryObject--&gt;writeSerialData--&gt;defaultWriteFields--&gt;writeObject0</code></p>
<p>可以看出，是一个递归的调用，也就是说被序列化的对象如果有嵌套的实现了序列化接口的用户对象，他也会被序列化。</p>
<h2 id="3-序列化版本uid"><a href="#3-序列化版本uid" class="headerlink" title="3. 序列化版本uid"></a>3. 序列化版本uid</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1L</span>;</span><br></pre></td></tr></table></figure>
<p><code>serialVersionUID</code>这个在实现序列化的类里面很常见，这个实际上就是一个数据版本号，已经序列化的数据在反序列化的时候，如果对象的版本已经修改了，反序列化就会出现错误。其实就是数据独享版本的控制，相同版本的才能正常反序列化。</p>
<p>把上的示例完善点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1L</span>;<span class="comment">// 注释①</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> y = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> z = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TransDemo test = <span class="keyword">new</span> TransDemo();</span><br><span class="line">        Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line">        System.out.println(<span class="string">"-----before serialize:"</span>);</span><br><span class="line">        test.printObject(foo);</span><br><span class="line"></span><br><span class="line">        test.putSerializedObject(foo); <span class="comment">// 注释②</span></span><br><span class="line">        System.out.println(<span class="string">"-----after serialize:"</span>);</span><br><span class="line">        test.printObject(test.getSerializedObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putSerializedObject</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"x.ser"</span>);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            oos.writeObject(foo);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">getSerializedObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Foo fooNew = <span class="keyword">null</span>;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"x.ser"</span>);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            System.out.println();</span><br><span class="line">            fooNew = (Foo) ois.readObject();</span><br><span class="line">            <span class="keyword">return</span> fooNew;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printObject</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"w: %d%n"</span>, foo.w);</span><br><span class="line">        System.out.printf(<span class="string">"x: %d%n"</span>, foo.x);</span><br><span class="line">        System.out.printf(<span class="string">"y: %d%n"</span>, foo.y);</span><br><span class="line">        System.out.printf(<span class="string">"z: %d%n"</span>, foo.z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的示例，第一次直接执行，第二字只做反序列化，并且修改了序列化对象的版本号，即操作注释①的uid=-2L ,注释掉 注释②出的代码。只反序列化。这个时候就提提示异常了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.InvalidClassException: com.fun.lang.Foo; local class incompatible: stream classdesc serialVersionUID = -1, local class serialVersionUID = -2</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你以为你熟悉的java关键字]]></title>
      <url>/2017/03/17/java%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<h2 id="1-static"><a href="#1-static" class="headerlink" title="1 static"></a>1 static</h2><ol>
<li>使用StaticDemo的任何方法（静态或者非静态方法），static代码块仅且执行一次</li>
<li>非静态成员方法可以操作静态成员变量的值</li>
<li>构造方法只在new 关键字出现，new新的对象的时候调用，<strong>使用类名直接调用静态方法的时候没有调用构造方法</strong></li>
<li>static不能用来修饰普通内部类中的变量，如果内部类本身是static的是可以的</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String prop = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        prop = <span class="string">"static"</span>;</span><br><span class="line">        System.out.println(<span class="string">"static code block......."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        prop = <span class="string">"constructor"</span>;</span><br><span class="line">        System.out.println(<span class="string">"constructor......."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sayHello method print the prop="</span>+prop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        prop = <span class="string">"sayHello2"</span>;</span><br><span class="line">        System.out.println(<span class="string">"sayHello2 method print the prop="</span>+prop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-final"><a href="#2-final" class="headerlink" title="2 final"></a>2 final</h2><p>在java中，可能使用到final关键字修饰的有数据、方法和类。</p>
<h3 id="2-1-final-修饰数据"><a href="#2-1-final-修饰数据" class="headerlink" title="2.1 final 修饰数据"></a>2.1 final 修饰数据</h3><p>有final修饰的数据是用来告诉编译器一块数据是恒定不变的，有时数据恒定不变是很有用的，比如：</p>
<ol>
<li>一个永不改变的编译时常量。</li>
<li>一个在运行时被初始化的值，但是又不希望它被改变。</li>
</ol>
<p>　　<strong>编译时常量必须是基本数据类型，并且以关键字final修饰，在对这个常量进行定义的时候必须进行赋值，并且以后不能被改变。</strong></p>
<p>　  对于基本类型，final使数值恒定不变；而对于对象引用，final使引用恒定不变，也就是说<strong>某个引用不能再指向其他对象了，但是当前指向的这个对象自身的数据是可以改变的。</strong></p>
<p>　<br>如何理解上面的解释呢，看如下示例：　<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> Student student)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这种写法就会报错，因为改变了student的指向，但是student是个final的。</span></span><br><span class="line">    <span class="comment">// student = new Student() </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这种操作是可以的，并且student的name会被成功修改</span></span><br><span class="line">    student.setName(<span class="string">"123"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-2-final修饰方法"><a href="#2-2-final修饰方法" class="headerlink" title="2.2 final修饰方法"></a>2.2 final修饰方法</h3><p>　　使用final修饰方法的作用是把方法锁定，以防止任何继承类修改它的含义。<strong>在继承类中，使用了与父类用final修饰的方法同名的方法时，并没有覆盖父类的该方法，而是生成了一个新的方法。也就是说final修饰的方法不能被重写</strong>。</p>
<h3 id="2-3-final修饰类"><a href="#2-3-final修饰类" class="headerlink" title="2.3 final修饰类"></a>2.3 final修饰类</h3><p>　　当将某个类定义为final时，就表明了你不打算继承该类，也不允许别人继承。
　　</p>
<h2 id="3-transient"><a href="#3-transient" class="headerlink" title="3 transient"></a>3 transient</h2><p>使用transient 关键字，标记变量不被序列化和反序列化</p>
<p>谈到序列化，static 变量也是不会被序列化的</p>
<h2 id="4-volatile"><a href="#4-volatile" class="headerlink" title="4 volatile"></a>4 volatile</h2><p>volatile 可以保证变量对所有线程的可见性，但是不能说是完全的线程，例如++ 操作是个非原子操作，就有可能出现问题</p>
<p>volatile只保证了可见性，在<strong>不满足</strong>以下情况的时候，需要加锁（synchronized 或者 java.util.concurrent中的原子类）来保证原子性</p>
<ol>
<li>运算结果并不依赖变量的当前值，后者能够确保只有单一线程修改变量的值</li>
<li>变量不需要同其他的状态变量一起参与不变约束</li>
</ol>
<p>volatile 修饰long / double 在多线程的时候可以把他们的读写变成原子的操作(现代的虚拟机已经把64位数据读写作为原子操作了)</p>
<p>volatile可以防止指令重排序</p>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> static </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java的基础核心-集合]]></title>
      <url>/2017/03/16/array-collection/</url>
      <content type="html"><![CDATA[<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h2><p><strong>数组是一个特殊对象</strong></p>
<p>网上找到的学习资料，java基础总结的比较完善的一位<br><a href="http://www.cnblogs.com/chenssy/category/525010.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/category/525010.html</a></p>
<blockquote>
<ol>
<li>数组性能比起list和set,效率高，单操作没有他们方便</li>
<li>ArrayList的扩容的方式中使用copyOf方法，按照此方法可以实现数据的动态长度</li>
<li>Arrays的方法中 copyOf 和asList 需要注意 .</li>
</ol>
</blockquote>
<p> asList的返回值是 Arrays.ArrayList 其父类是 AbstractList ,其中对 add()/remove等方法都是没有实现的。所以都是直接返回UnsupportedOperationException</p>
<p> 这个内部类ArrayList并没有提高add的实现方法。在ArrayList中，它主要提供了如下几个方法：</p>
<blockquote>
<ol>
<li>size：元素数量</li>
<li>toArray：转换为数组，实现了数组的浅拷贝。</li>
<li>get：获得指定元素。</li>
<li>contains：是否包含某元素。</li>
</ol>
</blockquote>
<p> 所以综上所述，asList返回的是一个长度不可变的列表。数组是多长，转换成的列表是多长，我们是无法通过add、remove来增加或者减少其长度的。</p>
<h2 id="2-集合"><a href="#2-集合" class="headerlink" title="2.集合"></a>2.集合</h2><p>关于集合的整体上面的理解，参考<br><a href="http://www.cnblogs.com/chenssy/p/3495238.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/p/3495238.html</a></p>
<p><img src="http://images.cnitblog.com/blog/381060/201312/28124707-3a873160808e457686d67c118af6fa70.png" alt="集合"></p>
<p>图片来自<a href="http://images.cnitblog.com/blog/381060/201312/28124706-794c0dc2df43446c85b93d7864119334.png" target="_blank" rel="noopener">http://images.cnitblog.com/blog/381060/201312/28124706-794c0dc2df43446c85b93d7864119334.png</a></p>
<h3 id="2-1-List接口"><a href="#2-1-List接口" class="headerlink" title="2.1 List接口"></a>2.1 List接口</h3><p> List接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。</p>
<h4 id="2-1-1-ArrayList"><a href="#2-1-1-ArrayList" class="headerlink" title="2.1.1 ArrayList"></a>2.1.1 ArrayList</h4><ol>
<li>初始大小为10，没已1.5进行扩容，扩容的时候使用的是Arrays.copyOf (System.arraycopy),所有指定大小可以避免不必要的扩容操作，同时可以避免扩容的时候空间多余</li>
<li>数组形式，适合快速定位查找。</li>
<li>非线程安全</li>
</ol>
<h4 id="2-1-2-LinkedList"><a href="#2-1-2-LinkedList" class="headerlink" title="2.1.2 LinkedList"></a>2.1.2 LinkedList</h4><ol>
<li>双向的链表。</li>
<li>非线程安全 </li>
<li><strong>首尾添加操作</strong>时候速度快，里面保存了最后一个节点(last)和第一个节点(first)的引用</li>
</ol>
<h4 id="2-1-3-Vector"><a href="#2-1-3-Vector" class="headerlink" title="2.1.3 Vector"></a>2.1.3 Vector</h4><p>类似ArrayList 但是操作都是在方法加了同步锁的，所以的线程安全的，同样是因为加了同步锁，整体效率会较ArrayList弱点 </p>
<h4 id="2-1-4-Stack"><a href="#2-1-4-Stack" class="headerlink" title="2.1.4 Stack"></a>2.1.4 Stack</h4><p> Stack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。</p>
<h3 id="2-2-Map接口"><a href="#2-2-Map接口" class="headerlink" title="2.2 Map接口"></a>2.2 Map接口</h3><p>Map与List、Set接口不同，它是由一系列键值对组成的集合，提供了key到Value的映射。同时它也没有继承Collection。在Map中它保证了key与value之间的一一对应关系。也就是说一个key对应一个value，所以它不能存在相同的key值，当然value值可以相同。实现map的有：HashMap、TreeMap、HashTable、Properties、EnumMap。</p>
<h4 id="2-2-1-HashMap"><a href="#2-2-1-HashMap" class="headerlink" title="2.2.1 HashMap"></a>2.2.1 HashMap</h4><p>HashMap 非线程安全，访问快</p>
<h5 id="2-2-1-1-内部结构"><a href="#2-2-1-1-内部结构" class="headerlink" title="2.2.1.1 内部结构"></a>2.2.1.1 内部结构</h5><p><strong>1. Entry<k,v> table</k,v></strong></p>
<p>内部是一个实现了Map.Entry<k,v>接口的静态内部类的数组。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * An empty table instance to share when the table is not inflated.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The table, resized as necessary. Length MUST Always be a power of two.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br></pre></td></tr></table></figure></k,v></p>
<p><em>值得注意的是，Entry<k,v>实际上是一个链表，所以HashMap可以看做一个链表数组</k,v></em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> K key;</span><br><span class="line">     V value;</span><br><span class="line">     Entry&lt;K,V&gt; next;</span><br><span class="line">     <span class="keyword">int</span> hash;</span><br></pre></td></tr></table></figure></p>
<p><strong>2. 关键概念</strong></p>
<ol>
<li>size : map中key-value的数量</li>
<li>loadFactor：加载因子 ,其中默认加载因子  DEFAULT_LOAD_FACTOR=0.75f</li>
<li>threshold：阀值，超过阀值的时候需要扩容，默认Integer.MAX_VALUE</li>
<li>capacity: 容量,构造方法传入或者默认值16，上限 (1 &lt;&lt; 30)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p><strong>3. 关于扩容</strong></p>
<p>每次加入数据的时候会计算Hash值，并检测是否超过阀值而要扩容。当size&gt;=threshold的时候就会扩容，每次扩大2倍的table.length。扩容的时候实际是遍历原来的table数据<strong>重新计算hash</strong>后放到新的size的table中。</p>
<h5 id="2-2-1-2-定位存放位子（table中的下标）"><a href="#2-2-1-2-定位存放位子（table中的下标）" class="headerlink" title="2.2.1.2 定位存放位子（table中的下标）"></a>2.2.1.2 定位存放位子（table中的下标）</h5><p>元素在table数组中的下标计算方式是使用hash() 方法的值与table的length-1进行&amp;运算（indexFor()方法）</p>
<p>插入数据的时候，要检测key时候重复，没有重复的时候，如果index的位子有元素，则新的元素插入在链表头部。</p>
<p>get(Object key) 方法的实现，其实就是对key做hash处理之后，在调用indexFor得到在table中的下标。在往后找，找到equals的值返回。</p>
<h4 id="2-2-2-TreeMap"><a href="#2-2-2-TreeMap" class="headerlink" title="2.2.2 TreeMap"></a>2.2.2 TreeMap</h4><p>红黑树实现，内部是有序的，在要求一个有序的map的是时候用比较的合适，效率上比HashMap弱一点。毕竟构建红黑的树的过程不是很简单</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// todo: 源码分析，待完善</span></span><br></pre></td></tr></table></figure>
<h4 id="2-2-3-Hashtable"><a href="#2-2-3-Hashtable" class="headerlink" title="2.2.3 Hashtable"></a>2.2.3 Hashtable</h4><p>继承的是Dictionary<k,v> ,HashMap继承是AbstractMap，实现的接口都一样</k,v></p>
<p>基本思想和HashMap差不多，但是put和get等操作方法上加了同步锁，所以是相对线程安全的，但是效率较HashMap弱</p>
<h3 id="2-3-Set接口"><a href="#2-3-Set接口" class="headerlink" title="2.3 Set接口"></a>2.3 Set接口</h3><p>Set元素不重复，可以是null,自己维护内部顺序</p>
<h4 id="2-3-1-EnumSet"><a href="#2-3-1-EnumSet" class="headerlink" title="2.3.1 EnumSet"></a>2.3.1 EnumSet</h4><p>内部元素必须是enum 类型</p>
<h4 id="2-3-2-HashSet"><a href="#2-3-2-HashSet" class="headerlink" title="2.3.2 HashSet"></a>2.3.2 HashSet</h4><p>内部其实就一个HashMap , set里面的每个元素被作为HashMap的key,set的操作其实就是对内部的HashMap的key的操作。</p>
<h4 id="2-3-3-TreeSet"><a href="#2-3-3-TreeSet" class="headerlink" title="2.3.3 TreeSet"></a>2.3.3 TreeSet</h4><p>TreeSet 里面就是一个实现了 NavigableMap<e,object>接口的map,通常就是TreeMap。</e,object></p>
<p>它是使用元素的自然顺序对元素进行排序，或者根据创建Set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。</p>
<h3 id="2-4-Queue接口"><a href="#2-4-Queue接口" class="headerlink" title="2.4 Queue接口"></a>2.4 Queue接口</h3><blockquote>
<p>队列，它主要分为两大类，一类是阻塞式队列，队列满了以后再插入元素则会抛出异常，主要包括ArrayBlockQueue、PriorityBlockingQueue、LinkedBlockingQueue。另一种队列则是双端队列，支持在头、尾两端插入和移除元素，主要包括：ArrayDeque、LinkedBlockingDeque、LinkedList。</p>
</blockquote>
<p>源自 <a href="http://www.cnblogs.com/chenssy/p/3495238.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/p/3495238.html</a></p>
<p>其中ArrayBlockQueue、PriorityBlockingQueue、LinkedBlockingQueue 为java.util.concurrent 包中的类</p>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 集合类 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[变幻莫测的Java内部类]]></title>
      <url>/2017/02/13/inner-class/</url>
      <content type="html"><![CDATA[<h2 id="1-1-内部类【特点】："><a href="#1-1-内部类【特点】：" class="headerlink" title="1.1 内部类【特点】："></a>1.1 内部类【特点】：</h2><ol>
<li><p>普通内部类中不能有static修饰的成员变量和方法</p>
</li>
<li><p>使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<strong>利用内部类可以间接实现多继承</strong>。 (利用多个内部类实现继承过个类，思想是组合)。</p>
</li>
<li>内部类可以用多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立。</li>
<li>在单个外围类中，<strong>可以让多个内部类以不同的方式实现同一个接口，或者继承同一个类</strong>。</li>
<li>创建内部类对象的时刻并不依赖于外围类对象的创建。</li>
<li>内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体。</li>
<li>内部类提供了更好的封装，除了该外围类，其他类都不能访问。</li>
</ol>
<h2 id="1-2内部类【使用-this与-new】"><a href="#1-2内部类【使用-this与-new】" class="headerlink" title="1.2内部类【使用.this与.new】"></a>1.2内部类【使用.this与.new】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**省略getter和setter方法**/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">            name = <span class="string">"chenssy"</span>;</span><br><span class="line">            age = <span class="number">23</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"name："</span> + getName() +<span class="string">"   ;age："</span> + getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OuterClass outerClass = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        OuterClass.InnerClass innerClass = outerClass.new InnerClass();</span><br><span class="line">        innerClass.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------</span><br><span class="line">Output：</span><br><span class="line">name：chenssy   ;age：<span class="number">23</span></span><br></pre></td></tr></table></figure>
<p>引用内部类我们需要指明这个对象的类型：OuterClasName.InnerClassName。同时如果我们需要创建某个内部类对象，必须要利用外部类的对象通过.new来创建内部类： OuterClass.InnerClass innerClass = outerClass.new InnerClass();</p>
<p>如果我们需要生成对外部类对象的引用，可以使用OuterClassName.this</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OuterClass..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> OuterClass <span class="title">getOuterClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> OuterClass.<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OuterClass outerClass = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        OuterClass.InnerClass innerClass = outerClass.new InnerClass();</span><br><span class="line">        innerClass.getOuterClass().display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------</span><br><span class="line">Output:</span><br><span class="line">OuterClass...</span><br></pre></td></tr></table></figure>
<h2 id="1-3-内部类【分类】"><a href="#1-3-内部类【分类】" class="headerlink" title="1.3 内部类【分类】"></a>1.3 内部类【分类】</h2><h3 id="1-3-1-成员内部类"><a href="#1-3-1-成员内部类" class="headerlink" title="1.3.1 成员内部类"></a>1.3.1 成员内部类</h3><p>成员内部类也是最普通的内部类，它是外围类的一个成员</p>
<p>【特点】：</p>
<ol>
<li>成员内部类中不能存在任何static的变量和方法；</li>
<li>成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类</li>
</ol>
<h3 id="1-3-2-局部内部类"><a href="#1-3-2-局部内部类" class="headerlink" title="1.3.2 局部内部类"></a>1.3.2 局部内部类</h3><p>在方法和属性内部定义的类，作用域在方法和属性内部</p>
<h3 id="1-3-3-匿名内部类"><a href="#1-3-3-匿名内部类" class="headerlink" title="1.3.3 匿名内部类"></a>1.3.3 匿名内部类</h3><p>比较常见</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InnerClass <span class="title">getInnerClass</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num,String str2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InnerClass()&#123;</span><br><span class="line">            <span class="keyword">int</span> number = num + <span class="number">3</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;        <span class="comment">/* 注意：分号不能省 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OuterClass out = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        InnerClass inner = out.getInnerClass(<span class="number">2</span>, <span class="string">"chenssy"</span>);</span><br><span class="line">        System.out.println(inner.getNumber());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">Output:</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>【特点】：</p>
<ol>
<li>匿名内部类是没有访问修饰符的。</li>
<li>new 匿名内部类，这个类首先是要存在的。如果我们将那个InnerClass接口注释掉，就会出现编译出错。</li>
<li>注意getInnerClass()方法的形参，第一个形参是用final修饰的，而第二个却没有。同时我们也发现第二个形参在匿名内部类中没有使用过，所以当所在方法的形参需要被匿名内部类使用，那么这个形参就必须为final。</li>
<li>匿名内部类是没有构造方法的。因为它连名字都没有何来构造方法。</li>
<li>使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</li>
<li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法</li>
</ol>
<h4 id="1-3-3-1-使用的形参为何要final"><a href="#1-3-3-1-使用的形参为何要final" class="headerlink" title="1.3.3.1 使用的形参为何要final"></a>1.3.3.1 使用的形参为何要final</h4><p>内部类并不是直接调用方法传递的参数，而是利用自身的构造器对传入的参数进行备份，<strong>自己内部方法调用的实际上时自己的属性而不是外部方法传递进来的参数</strong></p>
<p>在内部类中的属性和外部方法的参数两者从外表上看是同一个东西，但实际上却不是，所以他们两者是可以任意变化的，也就是说在内部类中我对属性的改变并不会影响到外部的形参，而然这从程序员的角度来看这是不可行的，毕竟站在程序的角度来看这两个根本就是同一个，如果内部类该变了，而外部方法的形参却没有改变这是难以理解和不可接受的，所以为了保持参数的一致性，就规定使用final来避免形参的不改变。</p>
<h4 id="1-3-3-2-匿名内部类初始化"><a href="#1-3-3-2-匿名内部类初始化" class="headerlink" title="1.3.3.2 匿名内部类初始化"></a>1.3.3.2 匿名内部类初始化</h4><p>没有构造方法，所以使用<strong>构造代码块</strong>来创建达到构造方法的效果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> InnerClass <span class="title">getInnerClass</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> InnerClass() &#123;</span><br><span class="line"></span><br><span class="line">			String innerName;</span><br><span class="line">			<span class="keyword">int</span> innerAge;</span><br><span class="line">			<span class="comment">// 构造代码块初始化</span></span><br><span class="line">			&#123;</span><br><span class="line">				innerName = name;</span><br><span class="line">				innerAge = age;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">getInnerName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> innerName;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInnerAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> innerAge;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		OuterClass outerClass = <span class="keyword">new</span> OuterClass();</span><br><span class="line"></span><br><span class="line">		InnerClass innerClass = outerClass.getInnerClass(<span class="string">"fun"</span>,<span class="number">26</span>);</span><br><span class="line">		System.out.println(innerClass.getInnerName());</span><br><span class="line"></span><br><span class="line">		InnerClass innerClass2 = outerClass.getInnerClass(<span class="string">"BruceLee"</span>,<span class="number">26</span>);</span><br><span class="line">		System.out.println(innerClass2.getInnerName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">getInnerName</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getInnerAge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-4-静态内部类"><a href="#1-3-4-静态内部类" class="headerlink" title="1.3.4 静态内部类"></a>1.3.4 静态内部类</h3><p>使用static修饰的内部类我们称之为静态内部类，不过我们更喜欢称之为嵌套内部类</p>
<p>静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。 </p>
<p>所以有以下【特点】：</p>
<ol>
<li>它的创建是不需要依赖于外围类的。</li>
<li>它不能使用任何外围类的非static成员变量和方法</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 语言基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 内部类 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
