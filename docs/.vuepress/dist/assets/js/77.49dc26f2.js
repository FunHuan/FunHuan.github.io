(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{708:function(a,t,s){"use strict";s.r(t);var n=s(4),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"spring事务传播机制与原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring事务传播机制与原理"}},[a._v("#")]),a._v(" Spring事务传播机制与原理")]),a._v(" "),s("h2",{attrs:{id:"_1-事务属性与行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务属性与行为"}},[a._v("#")]),a._v(" 1 事务属性与行为")]),a._v(" "),s("h3",{attrs:{id:"_1-1-acid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-acid"}},[a._v("#")]),a._v(" 1.1 ACID")]),a._v(" "),s("p",[a._v("提到事务，不可避免需要涉及到事务的ACID属性：")]),a._v(" "),s("ul",[s("li",[a._v("原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。")]),a._v(" "),s("li",[a._v("一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。")]),a._v(" "),s("li",[a._v("隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。")]),a._v(" "),s("li",[a._v("持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。")])]),a._v(" "),s("p",[a._v("我们将严格遵循ACID属性的事务称为刚性事务。与之相对，期望最终一致性，在事务执行的中间状态允许暂时不遵循ACID属性的事务称为柔性事务，柔性事务的使用涉及到分布式事务方案")]),a._v(" "),s("h3",{attrs:{id:"_1-2-隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-隔离级别"}},[a._v("#")]),a._v(" 1.2 隔离级别")]),a._v(" "),s("p",[a._v("根据SQL92标准，MySQL的InnoDB引擎提供四种隔离级别（即ACID中的I）：")]),a._v(" "),s("ul",[s("li",[a._v("读未提交（READ UNCOMMITTED）")]),a._v(" "),s("li",[a._v("读已提交（READ COMMITTED）")]),a._v(" "),s("li",[a._v("可重复读（REPEATABLE READ）")]),a._v(" "),s("li",[a._v("串行化（SERIALIZABLE），InnoDB默认的隔离级别是REPEATABLE READ，其可避免脏读和不可重复读，但不能避免幻读，需要指出的是，InnoDB引擎的多版本并发控制机制（MVCC）并没有完全避免幻读，关于该问题以及隔离级别说明")])]),a._v(" "),s("h2",{attrs:{id:"_2-spring事务隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring事务隔离级别"}},[a._v("#")]),a._v(" 2 Spring事务隔离级别")]),a._v(" "),s("p",[a._v("spring在处理事务隔离级别上和mysql类似, 在 Isolation 定义了5中事务隔离级别")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("DEFAULT")]),a._v("(TransactionDefinition.ISOLATION_DEFAULT)：spring 默认级别，即使用数据库定义的隔离级别")]),a._v(" "),s("li",[s("strong",[a._v("READ_UNCOMMITTED")]),a._v("(TransactionDefinition.ISOLATION_READ_UNCOMMITTED)： 读未提交")]),a._v(" "),s("li",[s("strong",[a._v("READ_COMMITTED")]),a._v("(TransactionDefinition.ISOLATION_READ_COMMITTED)：读已提交")]),a._v(" "),s("li",[s("strong",[a._v("REPEATABLE_READ")]),a._v("(TransactionDefinition.ISOLATION_REPEATABLE_READ)：可重复读")]),a._v(" "),s("li",[s("strong",[a._v("SERIALIZABLE")]),a._v("(TransactionDefinition.ISOLATION_SERIALIZABLE)：串行化")])]),a._v(" "),s("h2",{attrs:{id:"_3-spring事务传播机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring事务传播机制"}},[a._v("#")]),a._v(" 3 Spring事务传播机制")]),a._v(" "),s("h3",{attrs:{id:"_3-1-事务传播条件限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-事务传播条件限制"}},[a._v("#")]),a._v(" 3.1 事务传播条件限制")]),a._v(" "),s("p",[a._v("因为 spring 是使用 aop 来代理事务控制 ，是针对于接口或类的，所以在同一个 service 类中两个方法的调用，传播机制是不生效的。关于具体的实现原理，下一节会具体分析。")]),a._v(" "),s("h3",{attrs:{id:"_3-2-事务传播类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-事务传播类型"}},[a._v("#")]),a._v(" 3.2 事务传播类型")]),a._v(" "),s("p",[a._v("事务传播类型定义在枚举类 Propagation 中")]),a._v(" "),s("p",[a._v("下面的类型都是针对于被调用方法来说的，理解起来要想象成两个 service 方法的调用才可以。")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("PROPAGATION_REQUIRED (默认)")]),a._v(" "),s("ul",[s("li",[a._v("支持当前事务，如果当前没有事务，则新建事务")]),a._v(" "),s("li",[a._v("如果当前存在事务，则加入当前事务，合并成一个事务")])])]),a._v(" "),s("li",[s("strong",[a._v("REQUIRES_NEW")]),a._v(" "),s("ul",[s("li",[a._v("新建事务，如果当前存在事务，则把当前事务挂起")]),a._v(" "),s("li",[a._v("这个方法会独立提交事务，不受调用者的事务影响，父级异常，它也是正常提交")])])]),a._v(" "),s("li",[s("strong",[a._v("NESTED")]),a._v(" "),s("ul",[s("li",[a._v("如果当前存在事务，它将会成为父级事务的一个子事务，方法结束后并没有提交，只有等父事务结束才提交")]),a._v(" "),s("li",[a._v("如果当前没有事务，则新建事务")]),a._v(" "),s("li",[a._v("如果它异常，父级可以捕获它的异常而不进行回滚，正常提交")]),a._v(" "),s("li",[a._v("但如果父级异常，它必然回滚，这就是和 REQUIRES_NEW 的区别")])])]),a._v(" "),s("li",[s("strong",[a._v("SUPPORTS")]),a._v(" "),s("ul",[s("li",[a._v("如果当前存在事务，则加入事务")]),a._v(" "),s("li",[a._v("如果当前不存在事务，则以非事务方式运行，这个和不写没区别")])])]),a._v(" "),s("li",[s("strong",[a._v("NOT_SUPPORTED")]),a._v(" "),s("ul",[s("li",[a._v("以非事务方式运行")]),a._v(" "),s("li",[a._v("如果当前存在事务，则把当前事务挂起")])])]),a._v(" "),s("li",[s("strong",[a._v("MANDATORY")]),a._v(" "),s("ul",[s("li",[a._v("如果当前存在事务，则运行在当前事务中")]),a._v(" "),s("li",[a._v("如果当前无事务，则抛出异常，也即父级方法必须有事务")])])]),a._v(" "),s("li",[s("strong",[a._v("NEVER")]),a._v(" "),s("ul",[s("li",[a._v("以非事务方式运行，如果当前存在事务，则抛出异常，即父级方法必须无事务")])])])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",[a._v("一般用得比较多的是 PROPAGATION_REQUIRED ， REQUIRES_NEW，NESTED")]),a._v(" "),s("p",[a._v("REQUIRES_NEW 一般用在子方法需要单独事务")])]),a._v(" "),s("p",[s("strong",[a._v("事务传播特性示例： https://juejin.cn/post/6844903600943022088  (强烈建议看看)")])]),a._v(" "),s("h2",{attrs:{id:"_4-spring事务实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-spring事务实现原理"}},[a._v("#")]),a._v(" 4 Spring事务实现原理")]),a._v(" "),s("p",[a._v("声明式事务的实现就是通过环绕增强的方式，在目标方法执行之前开启事务，在目标方法执行之后提交或者回滚事务")]),a._v(" "),s("p",[a._v("细节源码分析请参阅："),s("a",{attrs:{href:"https://juejin.cn/post/6844903600943022088",target:"_blank",rel:"noopener noreferrer"}},[a._v("Spring事务传播行为"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"_4-1-spring事务抽象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-spring事务抽象"}},[a._v("#")]),a._v(" 4.1 Spring事务抽象")]),a._v(" "),s("ul",[s("li",[a._v("PlatformTransactionManager / AbstractPlatformTransactionManager")]),a._v(" "),s("li",[a._v("TransactionDefinition")]),a._v(" "),s("li",[a._v("TransactionStatus")])]),a._v(" "),s("p",[a._v("接口"),s("code",[a._v("PlatformTransactionManager")]),a._v("定义了事务操作的行为，其依赖"),s("code",[a._v("TransactionDefinition")]),a._v("和"),s("code",[a._v("TransactionStatus")]),a._v("接口，其实大部分的事务属性和行为我们以MySQL数据库为例已经有过了解，这里再对应介绍下。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("PlatformTransactionManager")]),a._v("：事务管理器")]),a._v(" "),s("li",[s("code",[a._v("getTransaction")]),a._v("方法：事务获取操作，根据事务属性定义，获取当前事务或者创建新事物；")]),a._v(" "),s("li",[s("code",[a._v("commit")]),a._v("方法：事务提交操作，注意这里所说的提交并非直接提交事务，而是根据当前事务状态执行提交或者回滚操作；")]),a._v(" "),s("li",[s("code",[a._v("rollback")]),a._v("方法：事务回滚操作，同样，也并非一定直接回滚事务，也有可能只是标记事务为只读，等待其他调用方执行回滚。")]),a._v(" "),s("li",[s("code",[a._v("TransactionDefinition")]),a._v("：事务属性定义")]),a._v(" "),s("li",[s("code",[a._v("getPropagationBehavior")]),a._v("方法：返回事务的传播属性，默认是"),s("code",[a._v("PROPAGATION_REQUIRED")]),a._v("；")]),a._v(" "),s("li",[s("code",[a._v("getIsolationLevel")]),a._v("方法：返回事务隔离级别，事务隔离级别只有在创建新事务时才有效，也就是说只对应传播属性"),s("code",[a._v("PROPAGATION_REQUIRED")]),a._v("和"),s("code",[a._v("PROPAGATION_REQUIRES_NEW")]),a._v("；")]),a._v(" "),s("li",[s("code",[a._v("getTimeout")]),a._v("方法：返回事务超时时间，以秒为单位，同样只有在创建新事务时才有效；")]),a._v(" "),s("li",[s("code",[a._v("isReadOnly")]),a._v("方法：是否优化为只读事务，支持这项属性的事务管理器会将事务标记为只读，只读事务不允许有写操作，不支持只读属性的事务管理器需要忽略这项设置，这一点跟其他事务属性定义不同，针对其他不支持的属性设置，事务管理器应该抛出异常。")]),a._v(" "),s("li",[s("code",[a._v("getName")]),a._v("方法：返回事务名称，声明式事务中默认值为“类的完全限定名.方法名”。")]),a._v(" "),s("li",[s("code",[a._v("TransactionStatus")]),a._v("：当前事务状态")]),a._v(" "),s("li",[s("code",[a._v("isNewTransaction")]),a._v("方法：当前方法是否创建了新事务（区别于使用现有事务以及没有事务）；")]),a._v(" "),s("li",[s("code",[a._v("hasSavepoint")]),a._v("方法：在嵌套事务场景中，判断当前事务是否包含保存点；")]),a._v(" "),s("li",[s("code",[a._v("setRollbackOnly")]),a._v("和"),s("code",[a._v("isRollbackOnly")]),a._v("方法：只读属性设置（主要用于标记事务，等待回滚）和查询；")]),a._v(" "),s("li",[s("code",[a._v("flush")]),a._v("方法：刷新底层会话中的修改到数据库，一般用于刷新如Hibernate/JPA的会话，是否生效由具体事务资源实现决定；")]),a._v(" "),s("li",[s("code",[a._v("isCompleted")]),a._v("方法：判断当前事务是否已完成（已提交或者已回滚）。")])]),a._v(" "),s("h3",{attrs:{id:"_4-2-spring事务切面-代理类生成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-spring事务切面-代理类生成"}},[a._v("#")]),a._v(" 4.2 Spring事务切面(代理类生成)")]),a._v(" "),s("ul",[s("li",[a._v("AbstractAutoProxyCreator")])]),a._v(" "),s("h3",{attrs:{id:"_4-3-spring事务拦截"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-spring事务拦截"}},[a._v("#")]),a._v(" 4.3 Spring事务拦截")]),a._v(" "),s("ul",[s("li",[a._v("TransactionInterceptor")]),a._v(" "),s("li",[a._v("MethodInterceptor")])]),a._v(" "),s("h3",{attrs:{id:"_4-4-spring事务同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-spring事务同步"}},[a._v("#")]),a._v(" 4.4 Spring事务同步")]),a._v(" "),s("ul",[s("li",[a._v("AbstractPlatformTransactionManager")])]),a._v(" "),s("h2",{attrs:{id:"_5-spring事务失效的几种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-spring事务失效的几种情况"}},[a._v("#")]),a._v(" 5 Spring事务失效的几种情况")]),a._v(" "),s("h3",{attrs:{id:"_5-1-数据库引擎不支持事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-数据库引擎不支持事务"}},[a._v("#")]),a._v(" 5.1 数据库引擎不支持事务")]),a._v(" "),s("p",[a._v("这里以 MySQL 为例，其 MyISAM 引擎是不支持事务操作的，InnoDB 才是支持事务的引擎，一般要支持事务都会使用 InnoDB")]),a._v(" "),s("h3",{attrs:{id:"_5-2-bean没有被spring管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-bean没有被spring管理"}},[a._v("#")]),a._v(" 5.2 Bean没有被Spring管理")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// @Service")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderServiceImpl")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderService")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("updateOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Order")]),a._v(" order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// update order")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("如果此时把 "),s("code",[a._v("@Service")]),a._v(" 注解注释掉，这个类就不会被加载成一个 Bean，那这个类就不会被 Spring 管理了，事务自然就失效了。原因在与spring事务管理是基于AOP完成的，没有被Spring管理，自然也AOP不了。")]),a._v(" "),s("h3",{attrs:{id:"_5-3-方法不是public的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-方法不是public的"}},[a._v("#")]),a._v(" 5.3 方法不是public的")]),a._v(" "),s("p",[a._v("这个的原因主要是因为AOP切面的时候 不支持非public的方法，切面不生效，自然事务也生效不了")]),a._v(" "),s("h3",{attrs:{id:"_5-4-方法自身调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-方法自身调用"}},[a._v("#")]),a._v(" 5.4 方法自身调用")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Service")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderServiceImpl")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderService")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Order")]),a._v(" order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("updateOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("updateOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Order")]),a._v(" order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// update order")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("因为它们发生了自身调用，就调该类自己的方法，而没有经过 Spring 的代理类，默认只有在外部调用事务才会生效，这也是老生常谈的经典问题了。原因也是AOP的特性导致。")]),a._v(" "),s("h3",{attrs:{id:"_5-5-数据源没有配置事务管理器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-数据源没有配置事务管理器"}},[a._v("#")]),a._v(" 5.5 数据源没有配置事务管理器")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PlatformTransactionManager")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("transactionManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DataSource")]),a._v(" dataSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DataSourceTransactionManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("dataSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("要开启事务，必须要加上事务管理器才行。")]),a._v(" "),s("h3",{attrs:{id:"_5-6-事务传播机制配置了不支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-事务传播机制配置了不支持"}},[a._v("#")]),a._v(" 5.6 事务传播机制配置了不支持")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Service")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderServiceImpl")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderService")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("propagation "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Propagation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("NOT_SUPPORTED"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("updateOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Order")]),a._v(" order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// update order")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("h3",{attrs:{id:"_5-7-异常捕获没有抛出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-异常捕获没有抛出"}},[a._v("#")]),a._v(" 5.7 异常捕获没有抛出")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// @Service")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderServiceImpl")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderService")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("updateOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Order")]),a._v(" order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// update order")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("想这种异常直接捕获，然后不爬出异常，触发不了事务回滚。")]),a._v(" "),s("h3",{attrs:{id:"_5-8-异常类型错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-异常类型错误"}},[a._v("#")]),a._v(" 5.8 异常类型错误")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// @Service")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderServiceImpl")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OrderService")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("updateOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Order")]),a._v(" order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// update order")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"更新错误"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("抛出了Exception ，但是事务要生效需要的是 RuntimeException 才行。")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("参考链接：")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/54067384",target:"_blank",rel:"noopener noreferrer"}},[a._v("【技术干货】Spring事务原理一探"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844903600943022088",target:"_blank",rel:"noopener noreferrer"}},[a._v("Spring事务传播行为"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/101396825",target:"_blank",rel:"noopener noreferrer"}},[a._v("Spring事务失效的 8 大原因，这次可以吊打面试官了！"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);