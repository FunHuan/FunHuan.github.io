(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{753:function(s,t,a){"use strict";a.r(t);var e=a(4),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"vuepress-文章模板示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress-文章模板示例"}},[s._v("#")]),s._v(" Vuepress 文章模板示例")]),s._v(" "),a("p",[s._v("vuepress的方式搭建静态博客，整洁美观")]),s._v(" "),a("h2",{attrs:{id:"标题一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标题一"}},[s._v("#")]),s._v(" 标题一")]),s._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",[s._v("至此，启动部分的 new SpringApplication 的工作基本完成。总结下步骤如下：")]),s._v(" "),a("ol",[a("li",[s._v("设置resourceloader和主类")]),s._v(" "),a("li",[s._v("判断并设置web应用的类型")]),s._v(" "),a("li",[s._v("查询并实例化 ApplicationContextInitializer 的实现类（ 通过META-INF/spring.factories的配置）")]),s._v(" "),a("li",[s._v("查询并实例化 ApplicationListener 的实现类（ 通过META-INF/spring.factories的配置）")]),s._v(" "),a("li",[s._v("设置主启动类（包含main方法的配置类）")])])]),s._v(" "),a("h2",{attrs:{id:"项目运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目运行"}},[s._v("#")]),s._v(" 项目运行")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run docs:dev // 测试运行\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run docs:build //生成\n")])])]),a("p",[s._v("备忘 https://segmentfault.com/a/1190000038323430")])])}),[],!1,null,null,null);t.default=r.exports}}]);